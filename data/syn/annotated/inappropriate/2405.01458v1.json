{
    "title": "UQA: Corpus for Urdu Question Answering",
    "abstract": "This paper introduces UQA, a novel dataset for question answering and text comprehension in Urdu, a low-resource language with over 70 million native speakers. UQA is generated by translating the Stanford Question Answering Dataset (SQuAD2.0), a large-scale English QA dataset, using a technique called EATS (Enclose to Anchor, Translate, Seek), which preserves the answer spans in the translated context paragraphs. The paper describes the process of selecting and evaluating the best translation model among two candidates: Google Translator and Seamless M4T. The paper also benchmarks several state-of-the-art multilingual QA models on UQA, including mBERT, XLM-RoBERTa, and mT5, and reports promising results. For XLM-RoBERTa-XL, we have an F1 score of 85.99 and 74.56 EM. UQA is a valuable resource for developing and testing multilingual NLP systems for Urdu and for enhancing the cross-lingual transferability of existing models. Further, the paper demonstrates the effectiveness of EATS for creating high-quality datasets for other languages and domains. The UQA dataset and the code are publicly available at www.github.com/sameearif/UQA.\n\n\n\nKeywords:\u2009Question-answering, machine translation, corpus, Urdu, low-resource languages, language resource, natural language processing",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "1.   Introduction",
            "text": "The growth of natural language processing (NLP) tasks and datasets in English has been remarkable. However, expanding the reach of NLP to languages other than English, especially those that are lower on digital resources, is crucial for advancing multilingual AI systems. Among such languages, Urdu, with over 70 million native speakers111www.britannica.com/topic/Urdu-language  ###reference_###, stands as a significant yet underrepresented language in the NLP domain.\nThe Stanford Question Answering Dataset 2.0 (SQuAD2.0) (Rajpurkar et al., 2018  ###reference_b20###) is a benchmark for evaluating machine comprehension of text, but it is limited to English-based systems. There are two categories of questions: (1) Answerable questions: These are questions for which a clear, definite answer can be extracted directly from the provided passage or context (2) Unanswerable questions: These are questions for which the answer cannot be found in the provided passage but they look similar to answerable questions. Figure 1 shows examples of answerable and unanswerable question from SQuAD2.0.\nTranslating SQuAD2.0 into other languages seems like a straightforward task, but it comes with its own set of challenges, mainly when the job requires mapping the start index of the answer in the English context to the start index in the Urdu context. The introduction of the \"Enclose to Anchor, Translate, Seek\" (EATS) technique addresses this very challenge by enclosing the answer within a context using a specific delimiter, translating the enclosed context, and then seeking the delimiter\u2019s position post-translation.\nIn this study, we contrast the outputs of popular translation models, including Google Translator222cloud.google.com/translate/docs/reference/rest  ###reference_rest### and Seamless M4T (Barrault et al., 2023  ###reference_b4###). Through rigorous evaluation, we measure inter-rater agreement using Krippendorff\u2019s alpha (Krippendorff, 2004  ###reference_b14###) to discern the most consistent and reliable translation method among the contenders. The selected model then serves as our primary tool in the EATS technique to produce the Urdu-translated dataset.\nWe intend for our work to serve as a tool to further the development of Urdu NLP tools to enable access to mainstream language applications among Urdu speakers. Due to the dataset\u2019s large size and high quality, it can serve as a valuable resource to train LLMs in Urdu and create domain-specific applications to empower under-served populations via educational and health resources."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "2.   Related Work",
            "text": "A large number of datasets for question-answering and text comprehension systems have been created for English. WikiQA (Yang et al., 2015  ###reference_b25###) was introduced in 2015 - it included 3,047 questions and 29,258 sentences, where 1,473 sentences were labeled as answer sentences to the questions. Soon after, Rajpurkar et al., 2016  ###reference_b21### introduced the Stanford Question Answering Dataset (SQuAD) created by crowdworkers posing questions on Wikipedia articles. They compiled 100,000+ questions for the task of machine comprehension of text. In an attempt to create more robust question-answering systems, a more challenging dataset titled SQuAD2.0 (Rajpurkar et al., 2018  ###reference_b20###) was then introduced by expanding on the work done for SQuAD (Rajpurkar et al., 2016  ###reference_b21###) - this introduced 50,000 unanswerable questions on top of the original dataset written adversarially by crowdworkers to look similar to answerable ones. Other corpora including HotpotQA (Yang et al., 2018  ###reference_b26###) containing 113k Wikipedia-based question-answer pairs, TriviaQA (Joshi et al., 2017  ###reference_b12###) with over 650K question-answer-evidence triples, and Meta\u2019s bAbI tasks data (Weston et al., 2016  ###reference_b23###) were created to introduce greater complexity in data to train more capable QA systems.\nDatasets for training cross-lingual functionality in QA systems were introduced in a multilingual context. The MLQA dataset was introduced by Lewis et al., 2019  ###reference_b15###. It contains QA instances in SQuAD format in seven languages (English, Arabic, German, Spanish, Hindi, Vietnamese, and Simplified Chinese) and was built using an alignment strategy on Wikipedia articles. They generated over 12,000 instances in English and 5,000 instances in each other language. Similarly, XQuAD (Artetxe et al., 2019  ###reference_b2###) (13,000 examples spanning 11 languages), XQA presented by Liu et al., 2019  ###reference_b16### (28,000 instances in 9 languages), TyDi by Clark et al., 2020  ###reference_b7### (204,000 examples in 11 languages), Xor-QA (Asai et al., 2021  ###reference_b3###) (40,000 instances across seven languages), and MKQA (Longpre et al., 2021  ###reference_b17###) (260,000 examples in 26 languages) was introduced for multilingual question answering systems.\nThere has been comparatively less work for monolingual non-English corpora - particularly for low-resource languages. A popular method of generating resources for such languages has been the translation of datasets for English into the target language employing different machine translation implementations. Some examples of such work are ParSQuAD (Abadani et al., 2021  ###reference_b1###) for Persian, SQuAD-it (Croce et al., 2018  ###reference_b9###) for Italian, Vietnamese SQuAD333www.kaggle.com/datasets/nkhachao/vietnamese-squad  ###reference_e-squad###, K-QuAD444www.github.com/Di-lab-Yonsei/K-QuAD  ###reference_### for Korean, and Arabic-SQuAD (Mozannar et al., 2019  ###reference_b18###).\nFor Urdu, question-answering resources are scarce. Some datasets have been presented, such as UQuAD555www.github.com/ahsanfarooqui/UQuAD---Urdu-Question-Answer-Dataset/tree/main  ###reference_Question-Answer-Dataset/tree/main### containing 499 questions and 27 paragraphs. Urdu Open-Ended Question Answer Text Dataset666www.futurebeeai.com/dataset/prompt-response-dataset/urdu-open-ended-question-answer-text-dataset  ###reference_e-dataset/urdu-open-ended-question-answer-text-dataset### with 5000+ question-answer pairs, and Urdu Closed-Ended Question Answer Text Dataset777www.futurebeeai.com/dataset/prompt-response-dataset/urdu-closed-ended-question-answer-text-dataset  ###reference_e-dataset/urdu-closed-ended-question-answer-text-dataset### also containing 5,000+ question-answer pairs are both human-generated datasets however they are not open source and do not provide any metrics or comments regarding the quality of the data. UQuAD1.0 (Kazi and Khoja, 2021  ###reference_b13###) is a work involving the translation of SQuAD1.0 (Rajpurkar et al., 2016  ###reference_b21###) containing 49,000 question-answer pairs from which 45,000 are translated from SQuAD (Rajpurkar et al., 2016  ###reference_b21###) (53% of the data, the remaining 47% was discarded) and 4,000 were manually generated via crowdsourcing. However, the dataset is not publicly available. Therefore, to the best of our knowledge, no large, high-quality, publicly available dataset exists for Urdu question answering and text comprehension - making our contribution a valuable and important step towards developing tools for this low-resource language."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "3.   Methodology",
            "text": "Translating the Stanford Question Answering Dataset (SQuAD2.0) (Rajpurkar et al., 2018  ###reference_b20###) into Urdu presents a unique set of challenges, with one of the foremost difficulties lying in accurately identifying the answer\u2019s starting position within the translated context paragraph. This challenge stems from the linguistic differences between the source and target language. Both languages have different grammatical structures, vocabulary, and idiomatic expressions, meaning there is no one-to-one mapping between the words in the source text and the translated text. The source language and the target language also have different word order and sentence structure, that is, English follows subject-verb-object (SVO) order, and Urdu follows subject-object-verb (SOV) order. Therefore, addressing this challenge requires a robust method for enclose to anchor, manual string matching without translation."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "3.1.   Translation Model Selection",
            "text": "All SQuAD2.0 (Rajpurkar et al., 2018  ###reference_b20###) context paragraphs were split into sentences using the python NLTK (Bird and Loper, 2004  ###reference_b5###) sentence tokenizer for our experiments. For experiment 1, we selected a set of 100 sentences to conduct a pilot test. This smaller subset allowed us to assess the viability of our manual string matching without translation and the overall experimental design in a controlled, manageable environment. In experiment 2 we selected a set of 1,512 sentences from a total of 100,026 sentences. The minimum required sample size for a confidence level of 99% with a 3% margin of error was calculated to be 1,030 using the population size (100,000) - we therefore took a sample of 1,512 sentences. The selected sentences for both experiments were subsequently passed through two machine translation systems: Google Translator2  ###reference_te2### and Facebook Seamless M4T (Barrault et al., 2023  ###reference_b4###).\nIn evaluation 1, three annotators (computer science researchers - native Urdu speakers) were presented with two anonymized machine translation systems, one of which was the Seamless M4T model and the other was Google Translator. The annotators were each assigned a total of 100 identical sentences. Their task involved labeling the data to indicate one of the following: (1) both translators produced the same output quality for a sentence, (2) Seamless M4T provided a better translation, or (3) Google Translator provided a better translation. The Google Translator was picked 14.33% of the times, and Seamless M4T was picked 51.67% of times, and both were considered to be of the same quality 34.0% of times. To determine the inter-rater reliability, the Krippendorff\u2019s alpha value was calculated and found to be 0.688, which, according to Krippendorff\u2019s interpretation (Krippendorff, 2004  ###reference_b14###) is sufficient for a tentative conclusions to be drawn.\nIn evaluation 2, twelve voters - undergraduate students, native Urdu speakers with English as medium of instruction - were asked to pick between the two translation models. The voters were given the same task as the annotators in Experiment 1. The Google Translator was picked 37.43% of the times, and Seamless M4T was picked 54.37% of the times, and both were considered to be of the same quality 8.20% of times.\nIn summary, Seamless M4T consistently demonstrated superior translation quality in both evaluations when compared with Google Translator."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "3.2.   Initial Experiments",
            "text": "Our initial approach involved translating the SQuAD2.0 dataset (Rajpurkar et al., 2018  ###reference_b20###) by translating the question and the answer string and then translating the context sentence by sentence. When we reached the line where the answer string was present, we used manual string matching without translation to find the translated answer. However, we encountered significant challenges: (1) The answer string in the context often underwent grammatical modifications when included within a paragraph; (2) The sentence tokenization libraries failed to detect all the abbreviations, resulting in low-quality sentence segmentation and, therefore, degraded translation results. As a result, relying solely on the exact string-matching approach proved to be insufficient for pinpointing the answer\u2019s start index.\nIn our second approach, we opted to translate each undivided paragraph as a single unit (to retain the context and semantic meaning) instead of translating line by line. This shift in strategy allowed us to pass the translated paragraph alongside the translated question and answer to a Large Language Model (LLM), such as LLaMA 2 (Touvron et al., 2023  ###reference_b22###) and GPT-3.5 (Brown et al., 2020  ###reference_b6###), in an attempt to determine the answer\u2019s start and end positions automatically. However, the models performed poorly on our text as they did not predict the correct start and end points in the Urdu paragraphs.\nSubsequently, we transitioned to using GPT-4 (OpenAI, 2023  ###reference_b19###), demonstrating promising results in accurately identifying answer positions within the translated context paragraph. However, the drawback of this approach was the significant computational cost associated with GPT-4, which rendered it impractical for this task. As a result, we had to reconsider our methodology to balance performance with computational efficiency and cost.\nTo address the challenges encountered in translating the SQuAD2.0 dataset into Urdu and accurately identifying answer start positions, we implemented a three-step solution illustrated in Figure 2.\n###figure_1###"
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "3.3.   Implementation",
            "text": ""
        },
        {
            "section_id": "3.3.1",
            "parent_section_id": "3.3",
            "section_name": "3.3.1.   Data Splitting",
            "text": "When a large paragraph (defined as text containing more than 1,000 characters) is passed through Seamless M4T (Barrault et al., 2023  ###reference_b4###), it tends to summarize or drop the last few sentences. To illustrate this behavior, Table 1 presents sentences from a paragraph of length 1,427 characters. The entire paragraph is passed through the translator, then the English paragraph is manually split into sentences, and the corresponding sentences are extracted from the translated paragraph. It is evident from the output that the last sentence is not fully translated.\nTo address this issue, we initially identified paragraphs with a length equal to or exceeding 1,000 characters. We then employed manual string matching without translation to divide these 3,307 paragraphs into smaller segments, ensuring that each paragraph segment had a length of less than 1,000 characters.\n###table_1###"
        },
        {
            "section_id": "3.3.2",
            "parent_section_id": "3.3",
            "section_name": "3.3.2.   Data Cleaning - EATS",
            "text": "To ensure that answer strings are retained in the translated text and unaffected by any text misalignment during the translation process, we introduce the technique of Manual string matching without translation. The process involves first highlighting the answer string in the original text by enclosing it in delimiters, then seeking the answers in the target language by looking for the delimiters, without translating the text. Thus, the first part of our process was to ensure that the data was in the following format: Infrared radiation is used in industrial, scientific and medical applications. The answer was marked with the delimiters because the removal of certain characters from the string would offset the answer start position, so \u2019\u2019 acts as a marker for the answer string in the context paragraph. Seamless M4T (Barrault et al., 2023  ###reference_b4###) sometimes fails to handle semicolons \u2019;\u2019, en dashes \u2019\u2019 that are used between figures to represent the range and em dashes \u2019\u2019 that are used to create a strong break in a sentence, emphasizing an interruption or additional information. To account for this, we replaced all the semicolons with the Arabic semicolon \u2019\\RL\u061b\u2019 and en dashes and em dashes with double hyphens \u2019\u2019 before the translation process started. Following this, all double quotation marks were removed from the text to ensure that only the answer string is enclosed within the specific double quotation mark \u2018\"\u2019 (i.e. U+0022 in UTF-16 encoding). In the final step \u2019\u2019 was replaced with \u2018\"\u2019. This data cleaning procedure was carried out for all the paragraphs, questions, and answers in SQuAD2.0 (Rajpurkar et al., 2018  ###reference_b20###)."
        },
        {
            "section_id": "3.3.3",
            "parent_section_id": "3.3",
            "section_name": "3.3.3.   Translation",
            "text": "As we had used quotation marks to highlight the answer paragraphs, they would serve as essential markers to identify the answer\u2019s start and end positions within the translated paragraph and precisely locate the answer within the text. Algorithm 1 outlines the pseudo-code for this process. In the algorithm, variable is a list containing either a single entity if it contains less than or equal to 1000 characters, otherwise it contains multiple entities i.e. sub-paragraphs - this is due to the splitting methodology defined in section 3.3.1. Following the translation, the double hyphens \u2019\u2019 in between digits were replaced with en dash \u2019\u2019, and the rest (i.e those not between digits) were replaced with em dash \u2019\u2019.\nOur methodology failed to retain quotation marks for only 392 out of 11,858 questions in the dev set and 5,574 out of 130,319 questions in the train set. Therefore, from a total of 142,177 questions only 5,966 were discarded which highlights the effectiveness of our approach, demonstrating a high degree of precision. In addressing the issue of missing quotation marks in a minor subset of our dataset, we found that GPT-4 (OpenAI, 2023  ###reference_b19###) could effectively correct these errors. However, considering that the erroneous data was only 4.2% of the overall dataset, we ultimately decided against correcting this subset using GPT-4 with the aim of minimizing expenses.\nFollowing the implementation of manual string matching without translation, we generated a total of 124,745 questions in the train set and 11,466 questions in the dev set. A breakdown of the number of questions in each category is provided in Table 2."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "4.   Evaluation and Discussion",
            "text": "We fine-tuned and evaluated different variants of mBERT (Devlin et al., 2019  ###reference_b10###), XLM-RoBERTa (abbreviated as XLM-R) (Conneau et al., 2020  ###reference_b8###; Goyal et al., 2021  ###reference_b11###) and mT5 (Xue et al., 2021  ###reference_b24###) on our dataset. All the models were fine-tuned for 4 epochs, learning rate for XLM-R models and mBERT was set to  and  for mT5 models. We used only answerable questions for fine-tuning on the train set and evaluating these models on the dev set. The performance of the models is quantified using two common metrics: Exact Match (EM) and F1 Score using the Huggingface wrapper888www.huggingface.co/spaces/evaluate-metric/squad  ###reference_squad### for the official SQuAD evaluation script by Rajpurkar et al., 2016  ###reference_b21###. All the models were trained for six epochs and the best checkpoint of each model was evaluated on the dev part of the dataset. Table 3 summarizes the results of the experiments.\nWe can see that the XLM-R-XL performs the best for both metrics, with mT5-Large closely following. This can be explained by the number of parameters (3.5B vs 1.2B) as well as differences in the size and quality of their original training corpora.\nComparing the results with existing state-of-the-art models for Urdu and similar languages (Persian and Arabic), Table 4 shows that our XLM-R-XL UQA model outperforms the best reported scores. While these results are not directly comparable with existing work due to differences in model parameter sizes, results of our evaluation on comparable models including mBERT and XLM-R (table 3) show that models trained on UQA outperform those presented for Arabic-SQuAD (BERT), and UQuAD1.0 (XLM-R). This improvement can be attributed to the quality of translation as well as the size of our training data.\nIncorporating unanswerable questions from our dataset into the training set could present a valuable opportunity to enhance model performance. Training on both answerable and unanswerable questions might empower the model to better discern between the two, potentially refining its ability to identify and respond to answerable queries with increased precision."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "5.   Conclusion",
            "text": "In this paper, we present the process of creating a question answering corpus for Urdu and make UQA publicly available. By training multiple state of the art question answering models on our datasets to get promising evaluation scores, we demonstrate the suitability of our dataset for training and evaluation of transformer based models. Future work can include building on to the dataset with domain specific data to fine-tune models - particularly LLMs - for a specific use case such as providing health care facilities to low resource areas.\nIn the translation process, we primarily relied on the selected model\u2019s inherent accuracy, given that no translation model guarantees 100% accuracy. We also did an extensive evaluation of the translation models to ensure that the one with the highest accuracy was used. In a low-resource language like Urdu achieving perfect translation accuracy can be a challenge, the large size of the dataset also makes manual fixes infeasible.\nThis paper also forms the groundwork for a pipeline to produce further domain-specific QA resources for Urdu without the need for translation by relying directly on question generation models that can be trained on UQA.\nOur work for resource generation in low resource languages, therefore, creates the opportunity to address the challenge of large-scale data generation required for language models across diverse languages and domains. Particularly in contexts where native data in the target language is sparse or unavailable."
        },
        {
            "section_id": "6",
            "parent_section_id": null,
            "section_name": "6.   Acknowledgements",
            "text": "We are grateful for the time and effort put in by our research interns who annotated our data: Aamina Jamal Khan, Abdullah Hashmat, Abeer Aamir, Daanish Uddin Khan, Eesha Kamran, Maham Ahmed Bhimra, Maryam Usman, Muhammad Faisal Nazir, Muhammad Khaquan, Muhammad Shayan, Omer Tafveez, and Qasim Anwar who supported our work."
        },
        {
            "section_id": "7",
            "parent_section_id": null,
            "section_name": "7.   Bibliographical References",
            "text": ""
        }
    ],
    "url": "http://arxiv.org/html/2405.01458v1",
    "segmentation": {
        "research_background_sections": [
            "1",
            "2"
        ],
        "methodology_sections": [
            "3",
            "3.1",
            "3.2",
            "3.3",
            "3.3.1",
            "3.3.2",
            "3.3.3"
        ],
        "main_experiment_and_results_sections": [
            "4"
        ]
    },
    "ablation_segmentation": {
        "ablation_sections": [
            "3.1",
            "3.2",
            "3.3.1",
            "3.3.2",
            "3.3.3"
        ]
    },
    "research_context": {
        "paper_id": "2405.01458v1",
        "paper_title": "UQA: Corpus for Urdu Question Answering",
        "research_background": "### Motivation\n\nThe paper is motivated by the disparity between the abundance of natural language processing (NLP) resources available for English and the scarcity of such resources for other languages, particularly those with fewer digital assets. Specifically, the paper focuses on Urdu, which has over 70 million native speakers but remains significantly underrepresented in the NLP field. By developing an Urdu Question Answering (UQA) corpus, the authors aim to foster the development of NLP tools for Urdu and extend the reach of mainstream language applications to Urdu speakers.\n\n### Research Problem\n\nThe primary research problem tackled in this paper is translating the Stanford Question Answering Dataset 2.0 (SQuAD2.0), which is a benchmark in English for machine comprehension of text, into Urdu. Translating such a dataset involves numerous challenges, especially mapping the start index of answers in English context to their corresponding positions in Urdu context. This complexity necessitates the development of a robust translation method to maintain the dataset\u2019s integrity and utility in Urdu.\n\n### Relevant Prior Work\n\nSeveral strands of prior work are relevant to this research:\n\n1. **SQuAD2.0**: The baseline SQuAD2.0 dataset (Rajpurkar et al., 2018) which provides a standard for evaluating English NLP systems through both answerable and unanswerable questions in a posed context.\n   \n2. **Translation Models**: The study explores the effectiveness of popular translation models like Google Translator and Seamless M4T (Barrault et al., 2023). These tools are examined for their consistency and reliability in translating the corpus from English to Urdu.\n   \n3. **Krippendorff\u2019s Alpha**: Krippendorff's alpha (Krippendorff, 2004) is employed for inter-rater reliability to evaluate the congruency of translated outputs, ensuring a rigorous validation process for selecting the best translation model.\n\nBy building on these prior works, the paper aims to produce a high-quality Urdu question-answering corpus and contribute to the broader goal of advancing multilingual AI systems.",
        "methodology": "Methodology: Translating the Stanford Question Answering Dataset (SQuAD2.0) (Rajpurkar et al., 2018 ###reference_b20###) into Urdu presents a unique set of challenges, with one of the foremost difficulties lying in accurately identifying the answer\u2019s starting position within the translated context paragraph. This challenge stems from the linguistic differences between the source and target language. Both languages have different grammatical structures, vocabulary, and idiomatic expressions, meaning there is no one-to-one mapping between the words in the source text and the translated text. The source language and the target language also have different word order and sentence structure, that is, English follows subject-verb-object (SVO) order, and Urdu follows subject-object-verb (SOV) order. Therefore, addressing this challenge requires a robust method for aligning and matching the answer spans.",
        "main_experiment_and_results": "### Main Experiment Setup:\n\n1. **Models Fine-Tuned and Evaluated:**\n   - **mBERT** (Devlin et al., 2019)\n   - **XLM-RoBERTa** (XLM-R) (Conneau et al., 2020; Goyal et al., 2021)\n   - **mT5** (Xue et al., 2021)\n   \n2. **Training and Evaluation Details:**\n   - All models were fine-tuned for 4 epochs.\n   - Learning rates:\n     - For XLM-R and mBERT: Specific rates were used, but the exact values are missing.\n     - For mT5: Specific rates were used, but the exact values are missing.\n   - Only answerable questions from the training set were used for fine-tuning.\n   - Evaluation was performed on the dev set.\n   \n3. **Evaluation Metrics:**\n   - Exact Match (EM)\n   - F1 Score\n   - Metrics implemented using the Huggingface wrapper for the official SQuAD evaluation script by Rajpurkar et al., 2016.\n\n4. **Training Duration:**\n   - All models were trained for six epochs, and the best checkpoint of each model was evaluated on the dev part of the dataset.\n\n### Main Experimental Results:\n\n1. **Overall Performance:**\n   - The XLM-R-XL variant performed the best on both the Exact Match (EM) and F1 Score metrics.\n   - The mT5-Large variant followed closely behind in performance.\n\n2. **Comparison to Existing State-of-the-Art:**\n   - XLM-R-XL: \n     - Outperformed existing state-of-the-art models for Urdu.\n     - Also outperformed models for similar languages such as Persian and Arabic.\n     - Even with different model parameter sizes, results showed superior performance when compared to analogous models such as mBERT and XLM-R for similar datasets (Arabic-SQuAD and UQuAD1.0).\n\n3. **Factors Contributing to Performance:**\n   - The superior performance of XLM-R-XL can be attributed to:\n     - Its large number of parameters (3.5B vs 1.2B in mT5-Large).\n     - The size and quality of its original training corpora.\n   - Improvement is also attributed to the quality of translation and the size of the training data for UQA.\n\n4. **Future Work:**\n   - Incorporating unanswerable questions from the dataset into the training set could further enhance model performance by helping the model distinguish between answerable and unanswerable questions more effectively."
    },
    "reference_ablation_studies": [
        {
            "research_objective": "To evaluate and select the best machine translation model among Google Translator and Seamless M4T for translating the SQuAD2.0 dataset into Urdu.",
            "experiment_process": "All SQuAD2.0 context paragraphs were split into sentences using the NLTK sentence tokenizer. The study consisted of two experiments: (1) A pilot test with 100 sentences and (2) a larger test with 1,512 sentences, calculated to ensure a 99% confidence level with a 3% margin of error. The sentences were passed through Google Translator and Seamless M4T. In the first evaluation, three native Urdu-speaking annotators compared the translations of 100 sentences from both systems, indicating preference or equal quality for each sentence. In the second evaluation, twelve native Urdu-speaking undergraduates performed the same task with the same set of sentences. Krippendorff\u2019s alpha was used for inter-rater reliability analysis.",
            "result_discussion": "Seamless M4T outperformed Google Translator in both evaluations; it was preferred 51.67% of the time by annotators and 54.37% of the time by undergraduate students, indicating consistently superior translation quality. The Krippendorff\u2019s alpha value of 0.688 supported these conclusions.",
            "ablation_id": "2405.01458v1.No1"
        },
        {
            "research_objective": "To test and refine the methodology for accurately translating the SQuAD2.0 dataset into Urdu and precisely identifying answer start positions within translated contexts.",
            "experiment_process": "The initial approach involved translating the SQuAD2.0 dataset's question, answer string, and context sentence by sentence, but this led to grammatical modifications and poor sentence segmentation. In the second approach, paragraphs were translated as single units, with LLaMA 2 and GPT-3.5 models used to locate answer positions, but the models underperformed. Switching to GPT-4 improved answer identification but introduced high computational costs. Ultimately, the EATS technique involving enclosing the answer string in delimiters, translating, and seeking the answers in the target language was implemented.",
            "result_discussion": "Translating full paragraphs retained context and semantic meaning, but initial attempts with GPT-4 were computationally expensive. The EATS technique effectively ensured answer string retention and alignment during translation. Despite minor issues with missing quotation marks, the method was highly precise, with only 4.2% of the dataset exhibiting errors, demonstrating a balance between precision and computational efficiency.",
            "ablation_id": "2405.01458v1.No2"
        }
    ]
}