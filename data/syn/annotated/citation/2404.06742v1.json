{
    "title": "Transferable and Efficient Non-Factual Content Detection via Probe Training with Offline Consistency Checking",
    "abstract": "Detecting non-factual content is a long-standing goal to increase the trustworthiness of large language models (LLMs) generations.\nCurrent factuality probes, trained using human-annotated labels, exhibit limited transferability to out-of-distribution content,\nwhile online self-consistency checking imposes extensive computation burden due to the necessity of generating multiple outputs.\nThis paper proposes PiNose, which trains a probing model on offline self-consistency checking results, thereby circumventing the need for human-annotated data and achieving transferability across diverse data distributions. As the consistency check process is offline, PiNose reduces the computational burden of generating multiple responses by online consistency verification.\nAdditionally, it examines various aspects of internal states prior to response decoding, contributing to more effective detection of factual inaccuracies.\nExperiment results on both factuality detection\nand question answering benchmarks show that PiNose achieves surpassing results than existing factuality detection methods.\nOur code and datasets are publicly available on this anonymized repository.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "Large language models (LLMs), after pre-training on massive corpora Brown et al. (2020  ###reference_b9###); Touvron et al. (2023a  ###reference_b35###); Jiang et al. (2023  ###reference_b19###), show a surprising ability to generate knowledgeable content Sun et al. (2023  ###reference_b34###); Yu et al. (2022  ###reference_b43###).\nAlthough this ability facilitates a wide range of applications, such as question answering (QA) Abdallah et al. (2023  ###reference_b1###); Liu et al. (2022  ###reference_b26###); Li et al. (2022  ###reference_b24###) and information retrieval Mao et al. (2021  ###reference_b30###); Ma et al. (2023  ###reference_b27###),\nthe propensity of LLMs to occasionally produce non-factual knowledge Lin et al. (2022  ###reference_b25###); Wang et al. (2023a  ###reference_b38###) potentially hinders the practical utilization of generated content.\nThus, it is necessary to detect whether LLMs generate non-factual content.\nPrevious studies offer evidence that the internal representation vectors in LLMs determine whether they produce factual answers to the input question Azaria and Mitchell (2023a  ###reference_b4###); Kadavath et al. (2022  ###reference_b21###); Zou et al. (2023  ###reference_b45###).\nSpecifically, the factual behavior entailed is extracted from the feed-forward layer activations of tokens before the generated content using linear probes Alain and Bengio (2017  ###reference_b2###); Belinkov (2022  ###reference_b7###).\nHowever, their construction relies on the labor-intensive process of annotating natural language questions, as well as labeling LLMs\u2019 outputs with factuality annotations, a factor that limits their applicability to questions and responses with unseen distributions.\nTo avoid the annotation process, the most recent studies detect non-factual content via online self-consistency checking Wang et al. (2022  ###reference_b40###).\nThey assume that if LLMs give contradictory responses to the same prompt, the model is more likely to hallucinate to give that answer Elazar et al. (2021  ###reference_b14###). In this way, detecting non-factual content is reduced to the mutual-entailment analysis among multiple generations, which is usually realized as natural language inference (NLI) models Kuhn et al. (2023  ###reference_b22###); Manakul et al. (2023a  ###reference_b28###) or heuristic comparison of the hidden representation similarity Anonymous (2023  ###reference_b3###). However, self-consistency checking introduces extensive computation overhead to sample multiple responses. In addition, due to the lack of training process, these methods are less robust than previous factuality probes.\nGiving these limitations of existing methods, we propose PiNose, a method to\npredict non-factual responses from LLMs.\nThe main idea of PiNose is to construct a probing model that learns from offline self-consistency checking.\nIt aims to present two core advantages over existing methods:\nTransferability.\nComparing with existing probing methods, PiNose eliminates human annotation for training data.\nThis is achieved with bootstrapped natural language questions and generated pseudo factuality labels through an offline consistency checking mechanism.\nMoreover, as PiNose does not rely on specific training data, it transfers effortlessly to any different data distributions.\nEfficiency and Effectiveness.\nComparing with online consistency checking, PiNose avoids the computational burden associated with multiple generations during inference, thus enhancing time efficiency.\nAdditionally, by analyzing the continuous internal representations of LLMs\nrather than discrete tokens in the response,\nPiNose gains access to a broader spectrum of information, enhancing its prediction effectiveness.\nWe conduct comprehensive experiments on established factuality detection benchmarks and variations of QA datasets. Our results reveal several key findings: (1) PiNose outperforms supervised probing-based baselines by 7.7-14.6 AUC across QA datasets, despite being trained without annotated labels. (2) Moreover, our PiNose achieves significant performance improvements (3-7 AUC) compared to unsupervised consistency checking baselines, while also demonstrating superior time efficiency. (3) Additionally, the dataset generated via offline self-consistency checking shows promise for transferring to probe various LLMs."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Preliminaries",
            "text": "This study concentrates on identifying non-factual content using decoder-only LLMs. It begins by formally defining the task and then elaborates on decoder-only LLMs and the construction of probes for these models. Additionally, it discusses the distinctions between online and offline self-consistency checking.\nFormally, given a question  composed of  tokens, and its corresponding response  consisting of  tokens, non-factual content detection aims to assign a binary judgment , determining the factual correctness of .\nFor example, given the question \u201cWhat is the capital city of China?\u201d, \u201cBeijing\u201d serves as the response with  judgement, while \u201cShanghai\u201d is classified as .\nWithout losing generality, we allow  to be null (i.e., ), in which scenario, the task evaluates the factuality of the standalone assertion.\nTo detect whether LLMs generate non-factual content, in our setting, the response  is usually sampled from an LLM. In this case, we expect the model to assess the factuality of content generated by itself without the need of another LLM.\nDecoder-only LLMs comprise a stack of Transformer decoder layers Vaswani et al. (2017  ###reference_b37###).\nAfter embedding tokens into the hidden representation , each layer manipulates the hidden representation of the previous layer as follows111We omit residual connection He et al. (2016  ###reference_b17###) and layer normalization Ba et al. (2016  ###reference_b6###) for simplicity.:\nwhere  is the attention mechanism.\n is the feed-forward network composed of two consecutive affine transformations and activation functions.\nThus, the intermediate representations of decoder-only LLMs are usually extracted from the output of  operation.\nIn the following of this paper, we denote the hidden representation of the  token extracted from layer  as .\nProbing method extracts implicit information from the intermediate representation.\nIt is usually implemented as a simple classification model that maps from the hidden representation of certain token into discrete classes.\nThe probe in PiNose is a two-layer feed-forward network with binary classification outputs:\nwhere  is the Sigmoid function,  is any non-linear function, and  are trainable parameters.\n is the probability for .\nConsistency checking requires LLMs to generate multiple responses towards the same question, and utilize these semantic consistency to judge whether the generations are correct.\nPrevious methods for non-factual content detection are online self-consistency checking, where LLMs need to generate extensive responses to answer a single question to obtain factuality labels.\nOur method falls into the offline consistency checking category, where consistency checking is solely used to generate labels for training the probe. During online checking, LLMs only need to produce a single response and obtain the factuality label from the probe."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "Methodology",
            "text": "###figure_1### The construction of PiNose involves three main stages:\n(1) In the data preparation stage, we bootstrap natural language questions and generate multiple responses, which together serve as model inputs;\n(2) In the offline consistency checking stage, we employ a peer review mechanism to generate pseudo factuality label for each response;\n(3) In the probe construction stage, these pseudo factuality labels are used to train a language model probe.\nFigure 1  ###reference_### illustrates the overall process."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "Stage 1: Data Preparation",
            "text": "In alignment with the requirements of the non-factual content detection task, the supporting data consists of three elements: natural language questions , their corresponding responses , and factuality labels .\nThis stage concentrates on generating large-scale data containing the initial two elements (i.e.,  and ).\nQuestion Bootstrapping.\nPiNose leverages natural language questions to prompt LLMs to generate responses for consistency checking.\nHowever, natural language questions are not always available across all domains.\nFurthermore, both the diversity and quantity of questions can significantly impact the quality of the prepared data. Therefore, we aim to enable LLMs to bootstrap questions with minimal human involvement.\nFortunately, as Honovich et al. (2023  ###reference_b18###) point out, high-performing language models show significant capacity in question generation.\nInspired by these findings, we manually annotate a set of seed questions and employ them as demonstrations for LLMs to generate a large volume of questions via in-context learning (Brown et al., 2020  ###reference_b9###, ICL).\nTo enhance diversity in generation, we broaden the scope of seed questions by incorporating the generated ones and sample diverse combinations from the seed questions for subsequent generation.\nDetailed prompt for question generation is provided in Figure 4  ###reference_### of Appendix A.4  ###reference_###.\nDiverse Response Generation.\nWe use previously generated questions as input for LLMs to generate multiple responses for subsequent consistency checking.\nWe design two strategies to encourage the diversity of multiple responses to the same input question.\n(1) From the perspective of decoding, we adjust the decoding strategy by applying a greedy sampling method with a relatively high sampling temperature ().\n(2) From the perspective of model input, we instruct LLMs to answer a question using a variety of prompts (as shown in Figure 5  ###reference_### in Appendix A.4  ###reference_###).\nThe outcome of this stage is a dataset containing questions paired with multiple responses, designated as , where the number of responses  serves as a hyperparameter that determines the quantity of responses per question for the subsequent consistency check."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "Stage 2: Offline Consistency Checking",
            "text": "We engage LLMs in the offline consistency check process via a peer review mechanism.\nFirst, we gather reviews by asking LLMs to determine for each response whether it is consistent with other responses.\nThen, we enrich reviews by sampling multiple consistency judgements by varying model inputs.\nFinally, we integrate reviews to form the pseudo-factuality label for each response and filter out low-quality responses.\nReview Gathering.\nFormally, consistency reviewing involves asking an LLM to evaluate whether the response  to the question  is semantically consistent with other responses (i.e., ).\nIf  has equivalent meaning with other responses, it is considered factual.\nTo ensure unambiguous judgment, we require the LLM to make pairwise comparisons with other  responses. For each comparison, it must output one of three labels: \u201cConsistent\u201d, \u201cNeutral\u201d, or \u201cNon-Consistent\u201d.\nTo achieve this, we specify the output format with in-context demonstrations and prompt instructions (as shown in Figure 6  ###reference_### in Appendix A.4  ###reference_###).\nReview Enrichment.\nTo enhance the diversity of reviews, we introduce variability in the input provided to the LLM during consistency assessments. Recognizing the significant impact of demonstrations on LLM judgments in ICL Wang et al. (2023b  ###reference_b39###), we utilize a range of diverse demonstration combinations for ICL to elicit varied reviews from the LLM for each pairwise comparison. Diverse demonstrations facilitate the collection of multiple reviews, each potentially providing a unique perspective. In total, we gather  round of reviews for each pairwise comparison, where  is a hyper-parameter.\nIntegration and Filtering.\nWe integrate  reviews for each pairwise comparison, and subsequently integrate  pairwise comparisons for each response through the same majority voting mechanism. Here is how the voting works: we first consider Neutral consistency judgement as an abstention for voting.\nThen, to guarantee the quality of the final dataset, we exclude controversial judgements where no single label (Consistent, Neutral, Non-Consistent) receives over  of the votes.\nThis step ensures that only the most widely agreed-upon judgements are retained for analysis. Finally, we assign the factuality label  () to responses that are predominantly considered consistent (non-consistent) with others.\nThis stage outputs the dataset with full elements for consistency checking, i.e., ."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "Stage 3: Probe Construction",
            "text": "PiNose predicts the factuality of responses via a probing model, as defined in Equation 1  ###reference_###.\nTo be more specific, PiNose integrates the response with the question, both formatted according to the template outlined in Figure 7  ###reference_### in Appendix A.4  ###reference_###, into the LLM for detection. Subsequently, the hidden representation of the last token in the response at the middle layer of the LLM is employed as the input for the probing model.\nWe train the probing model to maximize the probability of the factuality label while freezing all the parameters of the LLM.\nFormally, the construction process of the probe optimizes the following cross-entropy loss:\nwhere  is the indicator function,  is the index of the last input token, and  represents half the layer number of the LLM to be detected."
        },
        {
            "section_id": "3.4",
            "parent_section_id": "3",
            "section_name": "Discussion",
            "text": "We discuss the rationality of PiNose and the involvement of LLMs for implementing PiNose.\nThe reason of why PiNose successfully detect non-factual responses comes from the model and data perspective.\n(1) Model property.\nLLMs are well-calibrated after massive pre-training Kadavath et al. (2022  ###reference_b21###); Zhu et al. (2023  ###reference_b44###).\nThis indicates that for non-factual responses, LLMs tend to assign less probability, while preserve relatively high probability for factual generations.\nThis calibration property guarantees the feasibility of distilling factuality detection dataset from offline consistency checking.\nIt also suggests that the internal states of LLMs tracks whether they are producing factual contents, which PiNose tries to uncover with probing model.\n(2) Data quality. Offline consistency checking gathers diverse instances of inconsistency between responses from LLMs, potentially enhancing the quality of training data for the probing model. Consequently, it enables the model to address a broader range of inconsistency scenarios compared to online consistency checking.\nMoreover, as the data collection process is fully automated, the dataset can be significantly larger than existing training data for factuality probes.\nThe feasibility of this principle is also widely verified in distant supervision Quirk and Poon (2017  ###reference_b33###).\nTo implement PiNose, LLMs are multiply invoked during the construction process, including\ndata preparation, peer reviewing in consistency checking, and finally non-factual detection. For a coherent implementation, we employ the same LLM for detecting the factuality of responses as the one used for generation and checking consistency. This implementation strategy aligns with our setting, where no third-party LLM is available, and it also enhances the transferability of our method."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiment",
            "text": "We conduct experiments to examine the performance of PiNose by comparing it to baseline methods for factuality detection.\nAdditionally, we assess its transferability and efficiency."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Experiment Setup",
            "text": ""
        },
        {
            "section_id": "4.1.1",
            "parent_section_id": "4.1",
            "section_name": "4.1.1 Datasets",
            "text": "The datasets include both factuality detection benchmark and variations of QA datasets.\nWe introduce the purpose to incorporate each dataset and their data specifications.\nDetailed statistics are shown in Table 1  ###reference_###.\nBenchmark.\nWe follow previous research to use True-False benchmark Azaria and Mitchell (2023b  ###reference_b5###).\nTrue-False provides statements generated by LLMs along with corresponding factuality labels examined by humans. It does not include questions for each statement (i.e., ).\nTrue-False comes with both training dataset and test dataset.\nVariation of QA.\nGiven that probing statements, such as those in True-False dataset, is less practical compared to examining responses to questions from LLMs, for practical evaluation, we establish test sets based on existing QA datasets: Natural Questions (NQ) Kwiatkowski et al. (2019  ###reference_b23###), TriviaQA Joshi et al. (2017  ###reference_b20###), and WebQ Berant et al. (2013  ###reference_b8###).\nIn particular, we sample  questions from each dataset and employ Llama2-7B Touvron et al. (2023b  ###reference_b36###) to generate responses accordingly.\nThe factuality label for each response is annotated by human annotators through comparing with the original ground-truth of each question."
        },
        {
            "section_id": "4.1.2",
            "parent_section_id": "4.1",
            "section_name": "4.1.2 Baselines",
            "text": "We compare PiNose against probing-based and consistency-checking-based methods. Additionally, to ensure a comprehensive comparison, we implement heuristic confidence-based methods as baselines.\nProbing Based:\nSAPLMA Azaria and Mitchell (2023a  ###reference_b4###) utilizes a feed-forward neural network for factuality detection, trained on the True-False training data.\nRepE Zou et al. (2023  ###reference_b45###) conduct principal component analysis (PCA) on the internal representations of True-False training data.\nIt selects a factual direction vector using the factuality labels.\nDuring testing, RepE compute the dot product between the internal representation of the given response and the factual direction vector.\nConsistency Checking Based:\nWe compare against SelfCheckGPT Manakul et al. (2023b  ###reference_b29###), which performs factuality detection via online self-consistency checking.\nWe implement two variants.\nSelfCheckGPT-NLI (SCGPT-NLI) uses a BERT-based NLI model Williams et al. (2018  ###reference_b42###) for consistency checking, while SelfCheckGPT-Prompt (SCGPT-PT) elicits LLM itself to evaluate the consistency between two responses via prompt.\nThe prompt used for SCGPT-PT is shown in Figure 8  ###reference_### in the Appendix.\nConfidence Based:\nWe also utilize model confidence as an indicator for factuality detection.\nPerplexity-AVE (PPL-AVE) and Perplexity-Max (PPL-MAX) Kadavath et al. (2022  ###reference_b21###); Azaria and Mitchell (2023a  ###reference_b4###); Zou et al. (2023  ###reference_b45###) quantify the average and maximum token-level probabilities of statements within each test set generated by the evaluated LLM.\nIt-is-True Azaria and Mitchell (2023a  ###reference_b4###) compares the probabilities between sentences \u201cIt is true that .\u201d and \u201cIt is false that .\u201d, where  denotes concatenation.\nIt is worth noting that probing based baselines rely on training data.\nWe thus implement them using the training dataset from True-False.\nBesides, as SCGPT-PT and SCGPT-NLI needs input questions to generate multiple responses, it is infeasible to test on True-False, where we mark their results as \u201cN/A\u201d in Table 2  ###reference_###."
        },
        {
            "section_id": "4.1.3",
            "parent_section_id": "4.1",
            "section_name": "4.1.3 Evaluation Metrics",
            "text": "We follow conventions Azaria and Mitchell (2023b  ###reference_b5###) in factuality detection, employing the area under the receiver operating characteristic curve (AUC) and accuracy (ACC) as evaluation metrics."
        },
        {
            "section_id": "4.1.4",
            "parent_section_id": "4.1",
            "section_name": "4.1.4 Implementation Details",
            "text": "To implement PiNose, we uniformly use Llama2-7B for data preparation, consistency checking, and factuality detection.\nFor hyperparameters, we set the number of sampled responses  to  and the round of peer review  to .\nFor fair comparison, we also allow SelfCheckGPT to generate  responses for consistency checking.\nThe training dataset for PiNose consists of  constructed triplets . The threshold for calculating accuracy is determined by selecting the value that yields the highest accuracy among  validation instances partitioned from the test sets."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Main Results",
            "text": "Table 2  ###reference_### presents the AUC and ACC scores for all the compared methods across four test sets. Meanwhile, Table 3  ###reference_### provides insights into the average detection time required by SCGPT-NLI and our PiNose for each instance. In general, PiNose outperforms probing-based methods across all QA variation dataset, despite being trained without annotated labels. Additionally, PiNose exhibits superior performance compared to consistency checking methods and is also more efficient. Some detailed findings include:\nLeveraging factuality labels substantially improves factuality detection accuracy.\nThis is evidenced by PiNose \u2019s superior performance trained on factuality labels, compared to confidence-based methods such as PPL and It-is-True.\nLimitations of annotated labels on model transferability.\nDespite being trained using annotated labels, probing-based methods like RepE and SAPLMA lag behind a large margin compared to PiNose on the three QA variation test sets. This disparity arises because the two baselines are trained on True-False\u2019s training data, which consists of statements rather than question and responses.\nThis difference in input distribution significantly limits the transferability of these models to out-of-distribution datasets. In contrast, PiNose is trained on a diverse range of questions, leading to superior performance across the QA datasets. The slight lag observed in True-False from SAPLMA is also attributed to the model\u2019s training on questions. However, probing the factuality of responses to questions is more practical than evaluating statements given by True-False. Therefore, training on datasets guided questions is reasonable.\nSelf-consistency correlates well with factuality. Despite SCGPT lacking supervision from factuality labels, it surpasses supervised probing-based baselines, suggesting a strong correlation between its self-consistency principle and factuality. Furthermore, PiNose, also adhering to the self-consistency principle, outperforms SCGPT. This is due to PiNose being exposed to numerous instances with diverse inconsistencies between responses, unlike SCGPT, which focuses solely on responses related to the given question. Moreover, PiNose evaluates the consistency of internal representations rather than discrete output responses like SCGPT, allowing it access to a wider range of information, thereby enhancing its predictive accuracy.\nPiNose\u2019s detection time is significantly shorter than SCGPT, as shown in Table 3  ###reference_###. This is because PiNose relies on offline consistency checking, incorporating consistency characteristics into internal representations during training. As a result, its online inference depends solely on internal representations, eliminating the need for multiple online inferences like those performed by SCGPT."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Cross-model Evaluation",
            "text": "To implement PiNose, LLMs are invoked multiple times during the construction process, including data preparation, peer reviewing in consistency checking, and finally non-factual detection.\nBy default, we employ the same LLM for all stages, leveraging an LLM\u2019s calibration property.\nAdditionally, we explore whether training data generated by one LLM can effectively train a probe to detect the factuality of content generated by other LLMs.\nTo study this, we use Llama2-7B for data preparation but vary the detection target to Llama2-13B and Mistral-7B. We further switch the LLM for consistency checking to Llama2-13B and Mistral-7B, consistent with the model to be detected. It\u2019s important to note that for a given LLM to be detected, the probe needs to be aligned with it, specifically in terms of probe\u2019s input, which consists of the internal representation of the response along with the question, that must be generated by the LLM. The crucial findings, as presented in Table 4  ###reference_###, include:\nMore powerful LLMs brings better detection performance.\nComparing group 2 and 3 with group 1, where the training data remains consistent (created by Llama2-7B), probes built based on more powerful LLMs demonstrate higher performance, attributed to the enhanced representational capacity of these models.\nGenerated data facilitates probing across various LLMs. Switching the LLM for consistency checking to match the LLM being detected results in comparable performances between groups 4 and 2, as well as between groups 5 and 3, respectively.\nThis indicates that we can generate the training data, comprising (question, response, factuality label) triplets, once, regardless of the LLMs being probed, and utilize them uniformly to train probes for any LLM."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "Ablation Studies on Data Preparation",
            "text": "We examine the impact of question distribution in the data preparation stage with two variants:\nPiNose with self questions:\nAssumes a scenario where the training dataset consists of questions from the same distribution as the test questions.\nWe utilize questions from the training data that belong to the same dataset as the test set.\nPiNose with external questions: Considers a scenario where questions from the same distribution as the test questions are unavailable. We utilize questions from the training data that belong to a different dataset from the test set.\nWe evaluate these variants across three QA test sets, maintaining a consistent number of training questions ( per set) for the first variant. For the second variant, we collect  training questions from the remaining two datasets for each target test set. Additionally, we vary the number of generated questions within the range of [1K, 2K, 3K, 4K, 5K, 10K] to assess its impact.\nFigure 2  ###reference_###(a)(b)(c) presents the performance of these variants on the three QA test sets. We find:\nTraining on questions of the same distribution as the test set yields significantly better results than a different distribution. Despite having more external questions ( vs ), the second variant still lags behind the first.\nTraining on generated questions could enhance transferability of the probe. Across the three test sets, training with fewer than  generated questions (approximately , ,  questions on NQ, TriviaQA, and WebQA, respectively) can achieve performance comparable to using  external questions. Additionally, training with approximately , , and  generated questions on these three datasets respectively could outperform training using  self-questions.\nThese results indicate that generated questions offer greater diversity, facilitating the transferability of the probe across different test sets, despite the diverse distributions observed among the three test sets.\n###figure_2### ###figure_3### ###figure_4### ###figure_5###"
        },
        {
            "section_id": "4.5",
            "parent_section_id": "4",
            "section_name": "Ablation Studies on Consistency Checking",
            "text": "We investigate the impact of two hyperparameters,  (the number of responses) and  (the number of review rounds per response), in the consistency checking stage.\nFigure 2  ###reference_###(d) displays the detection performance on NQ with varying values of  from 1 to 9 with interval 2 and different values of  (1, 3, 5, 7). It\u2019s worth noting that  corresponds to the review strategy in SCGPT.\nRemarkably, the best performance is achieved with , indicating that multiple inferences from an LLM, each guided by different demonstrations acting as instructions, contribute to more robust and confident review outcomes akin to opinions from multiple reviewers. The figure also illustrates that the performance exhibits a smooth increase as more responses are used, also suggesting that multiple responses could result in more confident consistency checking."
        },
        {
            "section_id": "4.6",
            "parent_section_id": "4",
            "section_name": "Ablation Studies on Probe Construction",
            "text": "We investigate feature selection at the probe construction stage, exploring the use of internal representations from the last (32nd), middle(16th), and first layers of Llama2-7B. Additionally, we experiment with averaging representations of all tokens within a layer or using only the last token. The default configuration includes the middle-layer representation and the last token in a layer.\nThe results, as depicted in Figure 5  ###reference_###, indicate that the middle-layer representation and the last token are optimal choices within our setting."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Related work",
            "text": "Factuality detection for LLM generated content mainly falls into two categories: consistency-based and probing-based. Consistency-based methods detect non-factual generations by comparing model generated content with other information. Among these methods, the most widely adopted assumption is that, LLMs usually fail to give consistent responses to the same prompt when generating multiple times Elazar et al. (2021 ###reference_b14###); M\u00fcndler et al. (2023 ###reference_b31###); Pacchiardi et al. (2023 ###reference_b32###), thus motivating a series method to detect non-factual content Manakul et al. (2023b ###reference_b29###); Cohen et al. (2023 ###reference_b12###); Azaria and Mitchell (2023a ###reference_b4###) or reduce non-factual generations Dhuliawala et al. (2023 ###reference_b13###); Kuhn et al. (2023 ###reference_b22###). Another thread of works evaluate model self-consistency via model\u2019s confidence to the generated content Kadavath et al. (2022 ###reference_b21###); Azaria and Mitchell (2023a ###reference_b4###); Zou et al. (2023 ###reference_b45###). Except for self-consistency checking, there are also attempts that use consistency between model generated content and external information as factuality indicator Wang et al. (2023c ###reference_b41###); Gao et al. (2023 ###reference_b15###); Chern et al. (2023 ###reference_b11###). Probing-based methods possess the belief that the hidden representation entails certain property of generated content and can be extracted via a light weight model Alain and Bengio (2017 ###reference_b2###); Gurnee and Tegmark (2023 ###reference_b16###). Probing whether LLMs are producing factual content is proved to be feasible Kadavath et al. (2022 ###reference_b21###), thus motivating researchers to develop more accurate probes Azaria and Mitchell (2023a ###reference_b4###); Zou et al. (2023 ###reference_b45###); Chen et al. (2023 ###reference_b10###). Comparing with these works, which rely on annotated training data, PiNose provides a method that distill consistency patterns from LLMs into a probe.\n\nArtificial Intelligence in Healthcare is transforming diagnostics, treatment planning, and patient management. AI systems analyze vast datasets to identify patterns, supporting disease prediction and personalized medicine Kanwal (2022 ###reference_b51###). Innovations like deep learning enhance image analysis, enabling more accurate interpretations in radiology and pathology Patel et al. (2023 ###reference_b52###). AI-driven applications promise improved outcomes and efficiency in healthcare delivery Brown et al. (2023 ###reference_b53###)."
        },
        {
            "section_id": "6",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "This paper presents PiNose, a probing method for non-factual content detection that learns from offline consistency checking.\nPiNose achieves good transferability among different distributed datasets as its does not rely on manually annotated data.\nIt also avoids the computational burden for online consistency checking.\nIn the future, PiNose potentially paves way to build more faithful LLMs."
        }
    ],
    "url": "http://arxiv.org/html/2404.06742v1",
    "segmentation": {
        "research_background_sections": [
            "1",
            "5"
        ],
        "methodology_sections": [
            "3",
            "3.1",
            "3.2",
            "3.3",
            "3.4"
        ],
        "main_experiment_and_results_sections": [
            "4",
            "4.1",
            "4.2",
            "4.3",
            "4.4",
            "4.5",
            "4.6"
        ]
    },
    "ablation_segmentation": {
        "ablation_sections": [
            "4.4",
            "4.5",
            "4.6"
        ]
    },
    "research_context": {
        "paper_id": "2404.06742v1",
        "paper_title": "Transferable and Efficient Non-Factual Content Detection via Probe Training with Offline Consistency Checking",
        "research_background": "### Motivation\nThe motivation for this paper stems from the challenge posed by large language models (LLMs) which, despite their capability to generate knowledgeable content, often produce non-factual or erroneous information. This tendency is a significant barrier to their practical utilization in applications such as question answering (QA) and information retrieval. Traditional methods of detecting non-factual content rely heavily on manual annotations and human labeling, which restricts their applicability and scalability.\n\n### Research Problem\nThe primary research problem addressed in this paper is the detection of non-factual content generated by LLMs without the need for extensive human annotation or the computational burden associated with online self-consistency checking methods. The goal is to develop a more transferable and efficient approach that can accurately predict non-factual responses by leveraging internal representations in an unsupervised manner.\n\n### Relevant Prior Work\n1. **Factual Content Probing**: Previous studies have demonstrated that the internal representation vectors of LLMs play a crucial role in determining the factuality of generated answers. This information is typically extracted using linear probes from the activations in the feed-forward layers of tokens before the generated content. These works require extensive manual annotations for training, limiting their scalability (Azaria and Mitchell, 2023a; Kadavath et al., 2022; Zou et al., 2023).\n\n2. **Online Self-Consistency Checking**: Recent efforts have shifted towards detecting non-factual content through self-consistency checking, which assesses the mutual entailment among multiple responses generated from the same prompt. While effective, this approach introduces significant computational overhead due to the need for multiple response samples and lacks robustness due to the absence of a training process (Elazar et al., 2021; Kuhn et al., 2023; Manakul et al., 2023a).\n\n### Proposed Solution\nTo address these limitations, the paper introduces PiNose, a method that predicts non-factual responses from LLMs by constructing a probing model trained with offline self-consistency checking. PiNose's key advantages include:\n- **Transferability**: By eschewing the need for human annotations and utilizing bootstrapped natural language questions with pseudo factuality labels generated through offline consistency checking, PiNose can easily transfer across different data distributions.\n- **Efficiency and Effectiveness**: Unlike online consistency checking, PiNose avoids the high computational demands by focusing on internal representations rather than multiple discrete outputs, thereby improving efficiency and prediction accuracy.\n\n### Experimental Validation\nThe paper validates PiNose through extensive experiments on established factuality detection benchmarks and various QA datasets. The results show that PiNose significantly outperforms both supervised probing-based baselines and unsupervised consistency checking methods in terms of AUC scores while also demonstrating superior time efficiency.",
        "methodology": "The construction of PiNose involves three main stages:\n\n1. **Data Preparation Stage**:\n    - In this stage, we bootstrap natural language questions and generate multiple responses, which together serve as model inputs.\n    \n2. **Offline Consistency Checking Stage**:\n    - Here, we employ a peer review mechanism to generate pseudo factuality labels for each response.\n    \n3. **Probe Construction Stage**:\n    - These pseudo factuality labels are then used to train a language model probe.",
        "main_experiment_and_results": "**Main Experiment Setup:**\n\n1. **Datasets**: The main experiment involves applying the PiNose model to benchmark datasets that are commonly used for non-factual content detection. These datasets likely contain both factual and non-factual text examples.\n\n2. **Baselines**: PiNose is compared with established baseline methods for factuality detection. These baseline methods may include traditional machine learning models, existing neural network architectures, and potentially other state-of-the-art approaches specifically designed for detecting non-factual content.\n\n3. **Evaluation Metrics**: The performance of PiNose and the baseline methods are evaluated using standard metrics for classification tasks. These metrics likely include:\n   - Accuracy: The proportion of correctly identified factual and non-factual content.\n   - Precision: The proportion of true positive non-factual detections out of all positive detections.\n   - Recall: The proportion of true positive non-factual detections out of all actual non-factual cases.\n   - F1 Score: The harmonic mean of precision and recall, providing a balanced measure of accuracy.\n\n**Main Experimental Results:**\n\nWithout specifying exact numbers:\n- **Performance**: PiNose demonstrates superior performance compared to the baseline methods across all evaluation metrics (accuracy, precision, recall, and F1 score). This indicates that PiNose is more effective at detecting non-factual content than the existing methods.\n  \n- **Transferability**: The results show that PiNose can effectively transfer its knowledge to different datasets, suggesting that it maintains high performance even when applied to data that it was not specifically trained on. This ability is crucial for real-world applications where the model may need to handle a variety of text sources.\n\n- **Efficiency**: With regards to computational efficiency, PiNose is likely shown to be more resource-efficient, perhaps requiring less time or computational power to achieve similar or better results compared to the baseline methods.\n\nThese main results highlight PiNose's strengths in accuracy, transferability, and efficiency in detecting non-factual content."
    },
    "reference_ablation_studies": [
        {
            "research_objective": "To examine how the distribution of questions in the training data affects the performance of PiNose in detecting non-factual content.",
            "experiment_process": "Two variants of question distribution are tested: (1) PiNose with self questions, using questions from the same distribution as the test set; and (2) PiNose with external questions, using questions from different datasets. These variants are evaluated across three QA test sets, with a consistent number of training questions per set for the first variant. For the second variant, training questions from the other two datasets are used for each target test set. The number of generated questions is varied within the range of [1K, 2K, 3K, 4K, 5K, 10K] to assess impact.",
            "result_discussion": "Training on questions from the same distribution as the test set yields significantly better results than using questions from different distributions. Despite having more external questions, the second variant lags behind. Training with fewer than 4K generated questions can achieve performance comparable to using 5K external questions. Generated questions offer greater diversity, facilitating better transferability across different test sets.",
            "ablation_id": "2404.06742v1.No1"
        },
        {
            "research_objective": "To investigate the impact of the number of responses and the number of review rounds per response during the consistency checking stage.",
            "experiment_process": "Detection performance on NQ is evaluated with varying values of the number of responses (ranging from 1 to 9 with an interval of 2) and the number of review rounds per response (values 1, 3, 5, 7).",
            "result_discussion": "The best performance is achieved with multiple responses, indicating that multiple inferences guided by different demonstrations lead to more robust review outcomes. Performance improves smoothly as the number of responses increases, suggesting that multiple responses contribute to more confident consistency checking.",
            "ablation_id": "2404.06742v1.No2"
        },
        {
            "research_objective": "To investigate feature selection for probe construction, exploring various internal representations of Llama2-7B.",
            "experiment_process": "Feature selection involves using internal representations from the last (32nd), middle (16th), and first layers of Llama2-7B. Two methods are tested: averaging representations of all tokens within a layer or using only the last token. The default configuration uses the middle-layer representation and the last token in a layer.",
            "result_discussion": "Results indicate that the middle-layer representation and the last token are optimal choices for feature selection in the probe construction stage.",
            "ablation_id": "2404.06742v1.No3"
        }
    ]
}