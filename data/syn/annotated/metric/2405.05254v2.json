{
    "title": "You Only Cache Once: Decoder-Decoder Architectures for Language Models",
    "abstract": "We introduce a decoder-decoder architecture, YOCO, for large language models, which consists of two components, i.e., a cross-decoder stacked upon a self-decoder. The self-decoder efficiently encodes global key-value (KV) caches that are reused by the cross-decoder via cross-attention. The overall model behaves like a decoder-only Transformer. The design retains global attention capability. Additionally, the computation flow enables prefilling to early exit without changing the final output, thereby significantly speeding up the prefill stage. Experimental results demonstrate that YOCO achieves favorable performance compared to Transformer in various settings of scaling up model size and number of training tokens. We also extend YOCO to 1M context length with near-perfect needle retrieval accuracy. Code is available at https://aka.ms/YOCO.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "The decoder-only Transformer has become the de facto architecture for language models. Numerous efforts have continued to develop suitable architectures for language modeling. There have been main strands of explorations. First, encoder-only language models, such as BERT, bidirectionally encode the input sequence. Second, encoder-decoder models, such as T5, use a bidirectional encoder to encode input and a unidirectional decoder to generate output. Both of the above layouts struggle with autoregressive generation due to bidirectionality. Specifically, encoders have to encode the whole input and output tokens again for the next generation step. Although encoder-decoder can use only the decoder to generate, the output tokens do not fully leverage the parameters of the encoder, especially for multi-turn conversation. Third, decoder-only language models, such as GPT, generate tokens autoregressively.\n\nIn this work, we propose a decoder-decoder architecture, YOCO, for large language models. Specifically, we stack cross-decoder upon self-decoder. Given an input sequence, the self-decoder utilizes efficient self-attention. Then the cross-decoder layers employ cross-attention. The decoder-decoder architecture is conceptually similar to encoder-decoder, but the whole model behaves more like a decoder-only model from the external view. So, it naturally fits into autoregressive generation tasks, such as language modeling.\n\nSecond, the computation flow of the decoder-decoder architecture enables prefilling to early exit before entering the self-decoder. This property speeds up the prefill stage dramatically, improving user experience for long-context language models. Third, YOCO allows for more efficient system design for distributed long-sequence training. In addition, we propose gated retention for self-decoder, which augments retention with a data-controlled gating mechanism. We conduct extensive experiments to show that YOCO achieves favorable language modeling performance and has many advantages in terms of inference efficiency.\n\nExperimental results demonstrate that YOCO can be scaled up with more training tokens, larger model size, and longer context length. Specifically, we scale up the 3B YOCO model to trillions of training tokens, attaining results on par with prominent Transformer language models, such as StableLM. Moreover, the scaling curves ranging from 160M to 13B show that YOCO is competitive compared to Transformer. We also extend the context length of YOCO to 1M tokens, achieving near-perfect needle retrieval accuracy. In the multi-needle test, YOCO obtains competitive results even compared to larger Transformers.\n\nIn addition to good performance on various tasks, the profiling results show that YOCO improves the prefill latency, throughput, and serving capacity. The prefill stage is speeded up, for example, reducing the Transformer prefilling latency for a 512K context from 180 seconds to less than six seconds. The results position YOCO as a strong candidate model architecture for future large language models with native long-sequence support."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "You Only Cache Once (YOCO)",
            "text": "The proposed architecture, named YOCO, is designed for autoregressive modeling, such as large language models (LLMs). As shown in Figure 2, the decoder-decoder architecture has two parts, i.e., self-decoder and cross-decoder. Specifically, YOCO is stacked with blocks, where the first layers are self-decoder while the rest modules are cross-decoder. Given an input sequence, the input embeddings are packed into , where is hidden dimension. We first obtain contextualized vector representations , where is used to produce outputs. Then we compute to get the output vectors . Both self- and cross-decoder follow a similar block layout (i.e., interleaved attention and feed-forward network) as in Transformer. We also include pre-RMSNorm, SwiGLU, and grouped-query attention as improvements. The difference between the two parts lies in attention modules. Self-decoder uses efficient self-attention (e.g., sliding-window attention). In comparison, cross-decoder uses global cross-attention to attend to the shared representations produced by the output of the self-decoder."
        },
        {
            "section_id": "2.1",
            "parent_section_id": "2",
            "section_name": "Self-Decoder",
            "text": "Self-decoder takes token embeddings as input and computes intermediate vector representations:\nwhere  represents efficient self-attention, , and RMSNorm [45] is used for .\nCausal masking is used for efficient self-attention.\nMore design choices (e.g., gated retention) of the efficient self-attention module are detailed in Section 3."
        },
        {
            "section_id": "2.2",
            "parent_section_id": "2",
            "section_name": "Cross-Decoder",
            "text": "First, the output of the self-decoder generates global KV caches for cross-decoder:  \nwhere \\( W \\) are learnable weights.  \nThen, cross-decoder layers are stacked after the self-decoder to obtain the final output vectors \\( V \\).  \nThe KV caches are reused by all the \\( n \\) cross-decoder modules:  \nwhere is standard multi-head attention, and is a learnable matrix.  \nCausal masking is also used for cross-attention.  \nAfter obtaining , a classifier performs next-token prediction."
        },
        {
            "section_id": "2.3",
            "parent_section_id": "2",
            "section_name": "Inference Advantages",
            "text": "In addition to competitive language modeling results, YOCO significantly reduces serving costs and improves inference performance. We report detailed inference comparisons in Section 4.4. \n\nReducing Prefilling Time and Improving Throughput. As shown in Table 3, because the cross-decoder reuses the outputs of the self-decoder, we can exit early before entering the cross-decoder during the prefill stage. The intriguing property of computation dependency greatly accelerates the prefilling speed. First, only half the layers are needed for forward computation, i.e., at least half prefilling latency reduction. Second, the efficient attention modules of the self-decoder are usually fast. For the example of 512K context length, we can decrease the prefilling latency from 180 seconds (Transformer with optimized inference, such as Flash-Decoding and kernel fusion) to less than 6 seconds. Even for 32K length, YOCO has about three times speedup in terms of prefilling time. Table 3 compares prefilling time complexity of attention modules between Transformer and YOCO."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "Design Choices of Self-Decoder",
            "text": "We can choose various efficient self-attention methods for self-decoder.\nAs long as the module only requires constant inference memory, the cache memory complexity of the self-decoder depends on the number of layers.\nMoreover, a good module choice improves both training and deployment costs.\nIn this work, we use gated retention (Section 3.1  ###reference_###) or sliding-window attention (Section 3.2  ###reference_###)."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "Gated Retention",
            "text": "Gated retention (gRet, aka gRetNet or RetNet-3) augments retention [28  ###reference_b28###] with a data-dependent gating mechanism, which achieves training parallelism, good performance, and low inference cost simultaneously for sequence modeling.\nWe use gRet as the default efficient self-attention module in the experiments.\nThe method unifies the parallel, recurrent, and chunkwise recurrent computation paradigms. These three representations are equivalent and can obtain the same computation results.\nThe training process usually uses the parallel or chunkwise recurrent paradigms, while the inference stage can employ the recurrent paradigm for constant KV memory.\nWe describe the three representations as follows:\nThe Parallel Representation  \nThe gated retention is defined as:\nwhere  and  are learnable weights, and the temperature term  encourages  to 1 for better memorization [42  ###reference_b42###].\nThe data-controlled decay is head-wise [16  ###reference_b16###] rather than element-wise so that the computation can fully utilize NVIDIA tensor cores.\nRefer to [28  ###reference_b28###] for more details about the other designs.\nThe Recurrent Representation  \nBeing equivalent to Equation 4  ###reference_###, the output of gated retention can be computed recurrently.\nFor the -th timestep, the output is obtained via:\nwhere  are the same as in Equation 4  ###reference_###.\nDuring auto-regressive inference, the self-decoder maintains  as the intermediate state for an efficient generation.\nThe Chunkwise Recurrent Representation  \nThe chunk-wise representation is a unified formulation of recurrent and parallel representations.\nGiven chunk size , the outputs are computed chunk by chunk.\nThe computation is divided into inner-chunk and cross-chunk parts.\nDenote  as the -th chunk, i.e., , we compute the -th chunk as:\nwhere  is the intermediate state of the -th chunk, and  summarizes the data-controlled decay .\nThe proof in Appendix B  ###reference_### shows the equivalence between the computation paradigms.\nThe chunkwise paradigm combines the best of parallelism and recurrence, i.e., saving FLOPs compared with fully parallel computation and reducing the iterations compared to recurrent computation.\nDuring the training and prefill stages, the chunk-wise representation increases throughput and reduces GPU memory consumption.\nMulti-Head Gated Retention  \nSimilar to multi-head attention [36  ###reference_b36###] and multi-scale retention [28  ###reference_b28###], we apply gated retention to each head and combine the outputs together:\nwhere  are learnable matrices, and  [39  ###reference_b39###] normalizes each head [40  ###reference_b40###].\nWe also apply  gate to increase non-linearity [28  ###reference_b28###]."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "Sliding-Window Attention",
            "text": "Sliding-window attention [5  ###reference_b5###] restricts the attention range into a fixed window size .\nIn contrast, vanilla Transformer decoders attend to all previous tokens.\nDuring inference, the KV cache memory complexity can be reduced from  to , i.e., the memory usage is constant rather than increasing with sequence length.\nSimilar to multi-head self-attention [36  ###reference_b36###], we compute the output of sliding-window attention via:\nwhere  are learnable matrices, and the window causal mask  controls each query only attends to the previous keys whose distances are less than .\nThe pre-normalization and residual connection are also applied to the module."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiments",
            "text": "We evaluate YOCO for large language models from the following perspectives. First, we follow the setting of StableLM-3B-4E1T to scale up training tokens (Section 4.1). Second, we present the scaling curves of the proposed architectures (Section 4.2). Third, we scale up the YOCO model to 1M context length and evaluate its long-sequence modeling capability (Section 4.3). Fourth, we analyze the deployment advantages, including GPU memory footprint, serving capacity, prefilling time, and throughput (Section 4.4). Experimental results show that YOCO achieves competitive performance across various evaluation metrics. More importantly, the proposed method significantly reduces the inference cost."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Language Modeling Evaluation",
            "text": "We train a 3B-size YOCO language models by scaling up the number of training tokens. Then we compare the checkpoints with strong Transformer-based language models.\n\nSetup  \nWe use a similar training recipe as in StableLM-3B-4E1T. We adjust the head dimension to 128 instead of 80 as in StableLM for better kernel support. In order to keep the model size unchanged, we set the hidden size to 3072 and the number of layers to 26. Grouped-query attention is used, where the number of query heads is 24, and the number of key-value heads is 8. We train YOCO with gated retention. The non-embedding parameter count is 2.8B. In comparison, StableLM-3B-4E1T is 2.7B and OpenLLaMA-v2-3B is 3.2B. The training sequence length is 4096. The batch size is 4M tokens. We use the AdamW optimizer. The maximal learning rate is 3.2e-4 with 1000 warmup steps and linear decay to 1.28e-5. The total schedule is set to 5T tokens. We train the model with 400k steps (i.e., 1.6T tokens) given the resource budget. The curated training corpus is similar to that used previously. We use tiktoken-cl100k_base as the tokenizer. Detailed hyperparameters are described in the appendix.\n\nResults  \nTable 4 compares the YOCO checkpoints with OpenLLaMA-v2-3B, StableLM-base-alpha-3B-v2, and StableLM-3B-4E1T. We use LM Eval Harness to evaluate the zero-shot performance on various downstream tasks. OpenLLaMA-v2-3B and StableLM-base-alpha-3B-v2 are trained with 1T tokens. The intermediate numbers of StableLM-3B-4E1T are taken from its technical report. Experimental results across end tasks indicate that YOCO achieves comparable results with previous well-tuned Transformer language models. Both the checkpoints trained with 1T tokens and 1.6T tokens obtain consistent trend. Moreover, the results show that YOCO is scalable in terms of training tokens."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Scalability Compared with Transformers",
            "text": "###figure_3### We compare the scaling curves between Llama Transformer [36, 34], YOCO with gated retention (YOCO; Section 3.1), and YOCO with sliding-window attention (YOCO; Section 3.2). We train language models of various sizes (i.e., 160M, 400M, 830M, 1.4B, 2.7B, 6.8B, and 13B) using the same training data and settings. The validation loss is used as the evaluation metric. The scaling law [17] is supposed to extrapolate larger-size performance.\n\nSetup  \nWe augment the Transformer architecture with Llama [34] improvements, such as RMSNorm [45], SwiGLU [29], and removing bias. The sliding window size of YOCO is 1,024. We align the number of parameters by adjusting the FFN intermediate dimension. The training batch size is 0.25M tokens with a 2k sequence length. We train the models with 40k steps, i.e., 10B tokens. In practice, we find that the setting is effective for loss convergence, and the scaling laws can be well-fitted. More hyperparameters are detailed in Appendix D.\n\nResults  \nFigure 3 reports the validation loss with various parameter counts. We also fit the scaling curves as in [17]. YOCO obtains comparable performance from 160M to 13B compared to the Llama-optimized transformer architecture. The findings demonstrate that YOCO scales effectively with respect to model size. Moreover, YOCO outperforms Transformer and YOCO. The gains come from hybrid architectures of attention and retention, whose inductive biases tend to be complementary to each other. We observed similar gains by interleaving the attention and retention modules (1:3). Recent hybrid architectures [19] also confirm similar findings."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Long-Context Evaluation",
            "text": "We extend the context length of YOCO-3B to 1M tokens. We evaluate long-context models on needle retrieval and language modeling tasks. We continue the model training with longer lengths progressively. The length schedule is 64K, 256K, and 1M tokens. The batch size is kept the same as before. The learning rate and RoPE are set as in Table 8. Training data is up-sampled according to sequence length. For a fair comparison, we do not use long-instruction tuning data. More training details are described in Appendix E.\n\nThe pressure test evaluates whether models can retrieve \u201cneedles\u201d from a long document. We follow the evaluation setting of Gemini 1.5 and LWM. The needles are constructed as a city with a magic number. We run 10 times at the same depth and length. The averaged accuracy is reported. Figure 4 shows that YOCO-3B-1M passes the Needle-In-A-Haystack test with near perfect accuracy. The results indicate that YOCO has strong long-context modeling capability.\n\nMulti-Needle Retrieval  \nBesides the above single-needle retrieval, we conduct a multi-needle evaluation. We compare YOCO-3B-1M with previous long-context language models, including MiniCPM-128K, ChatGLM3-128K, YaRN-Mistral-128K, and LWM-1M-text. The evaluation is conducted in 128K sequence length, because most previous models are tuned with this length. Table 5 reports the accuracy with needles. Among these models, LWM-1M-text and YOCO-3B-1M are trained with a 1M context length, while the others are in 128K length. Although LWM-1M-text continues training of Llama-2-7B, YOCO-3B-1M can still achieve comparable performance with half the model size. Moreover, the 7B-size YaRN-Mistral-128K obtained by position interpolation lags behind the other models. Compared to MiniCPM-128K and ChatGLM3-128K, YOCO-3B-1M also outperforms these well-trained language models.\n\nPerplexity over Long Sequences  \nFigure 5 shows the cumulative average negative log-likelihood (NLL) as a function of context length. We evaluate both book and repository-level code data. We follow the setting of [27] and filter validation data that are longer than 1M tokens. NLL decreases consistently with longer sequence length. The results indicate that YOCO can effectively utilize long-distance dependency for language modeling. We also observe that the NLL-length curves tend to fit the power law, where the gaps are affected by the noise within the validation examples."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "Inference Advantages",
            "text": "We analyze inference efficiency from various perspectives, such as GPU memory footprint, prefilling latency, throughput, and serving capacity. We demonstrate that YOCO reduces the deployment cost by orders of magnitude, especially for long-sequence inference. More importantly, the user experience (such as latency) is improved while maintaining good performance and reducing expenses. We compare YOCO with Transformer. The default model configuration follows Section 4.1 ###reference_###. Notice that Transformer uses grouped-query attention [2 ###reference_b2###], Flash-Decoding [8 ###reference_b8###], and kernel fusion for a fair comparison. As described in Section 3.1 ###reference_###, gated retention uses the chunk-recurrent representation in the prefill stage, and the recurrent representation in the generation stage. The chunk size is set to 256. We implement a Triton [33 ###reference_b33###] kernel for gated retention. The evaluation sequence length is ranging from 32K to 1M. The last 1,024 tokens are supposed to be generated, while the previous tokens are given input context. The experiments are conducted with H100-80GB GPU cards.\n\nPrefilling Latency  \nIn the prefill stage, the model encodes input tokens in parallel. As shown in Figure 8 ###reference_###, the prefilling latency is a pain point of user experience for long-context models. For 512K- and 1M-length input sequences, Transformer needs about 180 seconds and 300 seconds, respectively. The computational complexity of Transformer is , which requires a large number of FLOPs for long context. In contrast, YOCO\u2019s prefilling time is , growing linearly (Section 2.3 ###reference_###) along the sequence length. Figure 8 ###reference_### shows that YOCO reduces the Transformer prefilling time from 180 seconds to less than 6 seconds for 512K context. As described in Section 2.3 ###reference_###, the prefill stage can early exit before entering cross-decoder. So, there is at least two times speedup of prefilling latency even for short context. For example, YOCO is faster than Transformer for 32K length.\n\nThroughput  \nThe throughput indicates how many tokens the model can process per second, involving both pre-filling and generation time. Figure 9 ###reference_### shows that YOCO achieves higher throughput across context lengths compared to Transformer. For the example of 512K queries, Transformer\u2019s throughput is 4.5 token/s while YOCO reaches 43.1 token/s, i.e, achieving speedup. The throughput is improved for the following reasons. First, YOCO decreases the time required for prefilling as previously demonstrated. Second, as the memory consumption is reduced, we can use larger batch size for inference, which also contributes to the throughput improvement."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "In this work, we propose a decoder-decoder architecture (YOCO) for large language modeling. YOCO achieves significantly better inference efficiency and competitive performance compared with Transformers. Experimental results demonstrate that YOCO achieves favorable results for large language models under various settings, i.e., scaling up number of training tokens, scaling up model size, and scaling up context length to 1M tokens. Profiling results also show that YOCO improves inference efficiency by orders of magnitude, especially for long-sequence modeling.\n\nThe work can be advanced from the following perspectives:\n\nYOCO + BitNet + Groq. Groq achieves very high throughput by putting all things within SRAM. The memory capacity bottleneck limits the model size and input token count. Hundreds of chips are connected to host just one model. BitNet reduces model weight memory. The LLM deployment cost is expected to be reduced by orders of magnitude using the above combination.\n\nYOCO for Multimodal Large Language Models. The YOCO layout is general to the use of multiple self-decoders. The cross-attention layers are natural for multimodal fusion. The causal dependency of self-decoders also perfectly fits in streaming video. The async multimodal large language models can avoid different data streams blocking each other, which is critical for real-time applications, such as robotics."
        }
    ],
    "url": "http://arxiv.org/html/2405.05254v2",
    "segmentation": {
        "research_background_sections": [
            "1"
        ],
        "methodology_sections": [
            "2",
            "2.1",
            "2.2",
            "3",
            "3.1",
            "3.2"
        ],
        "main_experiment_and_results_sections": [
            "4",
            "4.1",
            "4.2",
            "4.3",
            "4.4"
        ]
    },
    "ablation_segmentation": {
        "ablation_sections": [
            "3",
            "3.1",
            "3.2"
        ]
    },
    "research_context": {
        "paper_id": "2405.05254v2",
        "paper_title": "You Only Cache Once: Decoder-Decoder Architectures for Language Models",
        "research_background": "### Motivation\n\nThe motivation behind the paper is driven by the limitations and challenges encountered with the existing architectures for language models such as encoder-only, encoder-decoder, and especially decoder-only models. Although decoder-only models like GPT have become the standard due to their ability to cache key/value (KV) pairs and reuse them for subsequent generation steps, this advantage becomes a bottleneck as the number of tokens increases. Specifically, the primary issues are:\n\n1. **Memory Consumption**: KV caches consume a large amount of GPU memory, making the inference of large language models memory-bounded.\n2. **Prefilling Latency**: The initial computation required to fill the cache for long sequences is extremely time-consuming.\n\nThese make it difficult to deploy long-context language models practically.\n\n### Research Problem\n\nThe central research problem addressed in the paper is to design an optimized architecture for large language models that mitigates the high memory consumption and reduces the prefilling latency associated with KV caches in the existing decoder-only models, without compromising on performance.\n\n### Relevant Prior Work\n\n1. **Decoder-Only Models**: The paper references the dominant architecture of decoder-only models like GPT [reference b3], which are strong in autoregressive generation due to efficient KV caching but become memory-bounded for large token sequences [reference b24].\n\n2. **Encoder-Only Models**: BERT [reference b6] is mentioned as an example of encoder-only models that bidirectionally encode the input sequence but struggle with autoregressive tasks due to the necessity to re-encode the entire sequence for each new token generation.\n\n3. **Encoder-Decoder Models**: Models like T5 [reference b26] use a bidirectional encoder and a unidirectional decoder. While they can leverage the decoder independently for generation, they fail to fully utilize the encoder parameters across tokens, particularly problematic in multi-turn conversations.\n\n4. **Advancements in Efficiency**: The paper mentions specific advancements such as Flash-Decoding [reference b8] and techniques like grouped-query attention [reference b2] and KV quantization to improve memory and speed, but it emphasizes that these are still not sufficient for highly scalable, long-context models.\n\n5. **Retention Mechanisms**: The use of augmented retention mechanisms [reference b28] highlights the ongoing efforts to optimize the caching process further but still falls short in addressing the memory and latency issues comprehensively.\n\nBy proposing the YOCO (You Only Cache Once) architecture, the paper aims to blend the efficiency benefits of cache reuse from decoder-only models with the structural advantages of cross-attention seen in encoder-decoder models while significantly reducing memory consumption and prefilling latency. This new architecture also supports more efficient system design for training and inference in long-context scenarios, which is increasingly important as models scale up in size and context length.",
        "methodology": "The proposed architecture, named YOCO, is designed for autoregressive modeling, such as large language models (LLMs).\n\nThe decoder-decoder architecture has two parts: the self-decoder and the cross-decoder. Specifically, YOCO is stacked with multiple layers, where the first set of layers are the self-decoder, while the remaining layers are the cross-decoder.\n\nGiven an input sequence \\( X \\), the input embeddings are packed into \\( E \\in \\mathbb{R}^{n \\times d} \\), where \\( d \\) is the hidden dimension. We first obtain contextualized vector representations \\( Z \\in \\mathbb{R}^{n \\times d} \\), where \\( Z \\) is used to produce KV caches (key-value pairs) \\( C \\) for the cross-decoder.\n\nThen, we compute \\( Y \\) to get the output vectors \\( O \\). Both self- and cross-decoders follow a similar block layout (i.e., interleaved attention and feed-forward network) as in the Transformer model [36]. Additionally, pre-RMSNorm [45], SwiGLU [29], and grouped-query attention [2] are included as architectural improvements.\n\nThe key difference between the two parts lies in their attention modules. The self-decoder (Section 2.1) uses efficient self-attention mechanisms (e.g., sliding-window attention). In contrast, the cross-decoder (Section 2.2) utilizes global cross-attention to attend to the shared KV caches produced by the output of the self-decoder.\n\nThe architecture aims to optimize the caching mechanism by only generating key-value caches once in the self-decoder stage, which are then reused in the cross-decoder stage. This efficient use of KV caches helps in reducing computational redundancy and improving the overall performance of the autoregressive model.",
        "main_experiment_and_results": "### Main Experiment Setup and Results\n#### Experiment Setup\n1. **Datasets**: The main experiment does not specify the particular datasets used but follows the setup of StableLM-3B-4E1T, suggesting a focus on a large-scale language modeling task with a significant amount of training tokens.\n   \n2. **Training**: The model architecture and training process involves scaling up the number of training tokens to enhance the language model's performance, consistent with the approach of StableLM-3B-4E1T.\n\n3. **Baselines**: Although specific baseline models are not mentioned, the evaluation involves comparing YOCO's performance with other architectures implied in the referenced sections. It can be inferred that comparisons are made against conventional decoder-based language models.\n\n4. **Evaluations**:\n   - Scaling Curves: Evaluating how the performance of the YOCO architecture scales with increased training data and model size.\n   - Long-Sequence Modeling: Testing the model's ability to handle long sequences, specifically up to a context length of 1 million tokens.\n   - Deployment Metrics: Assessing GPU memory usage, serving capacity, prefilling time, and throughput to highlight the practical deployment advantages.\n\n#### Evaluation Metrics\n- Performance metrics typically used in language model evaluations, which could include perplexity, accuracy on language modeling benchmarks, and other relevant scoring methods.\n- Deployment metrics, including GPU memory footprint, serving capacity (likely the number of requests handled efficiently), prefilling time (time to initialize the model for inference), and throughput (processing speed of the model).\n\n#### Main Experimental Results\n- YOCO achieves **competitive performance** across various language modeling metrics.\n- The method **significantly reduces inference cost**, making it more feasible for practical applications.\n- Demonstrates effective **scaling** with more training tokens and larger model sizes.\n- Capable of **handling very long sequences** (up to 1M context length) efficiently.\n- Evident **deployment advantages** documented through metrics like GPU memory usage, prefilling time, and throughput, confirming its utility in real-world settings.\n\nThese results highlight YOCO\u2019s effectiveness in maintaining high performance while optimizing for reduced computational resources during inference."
    },
    "reference_ablation_studies": [
        {
            "research_objective": "Investigate the efficiency of the gated retention mechanism in the self-decoder of YOCO, focusing on its impact on training parallelism, performance, and inference cost.",
            "experiment_process": "In this study, the gated retention (gRet) method, also known as gRetNet or RetNet-3, is employed as the default efficient self-attention module in the experiments. The method integrates parallel, recurrent, and chunkwise recurrent computation paradigms. The training process uses parallel or chunkwise recurrent paradigms, while the inference stage utilizes the recurrent paradigm to maintain consistent KV memory. The study explores three representations: Parallel, Recurrent, and Chunkwise Recurrent. The computation is evaluated based on throughput and GPU memory consumption, particularly during training and prefill stages.",
            "result_discussion": "Gated retention (gRet) achieves training parallelism, good performance, and low inference costs. The chunkwise paradigm, in particular, combines the benefits of parallelism and recurrence, enhancing throughput and reducing GPU memory usage compared to fully parallel computation. This demonstrates that gRet is a highly efficient self-attention mechanism for sequence modeling in the YOCO architecture.",
            "ablation_id": "2405.05254v2.No1"
        },
        {
            "research_objective": "Evaluate the effectiveness of the sliding-window attention mechanism in reducing inference memory usage while maintaining performance.",
            "experiment_process": "Sliding-window attention is tested by restricting the attention range to a fixed window size, contrasting with the vanilla Transformer decoders that attend to all previous tokens. This setup aims to reduce the KV cache memory complexity from O(n) to O(1). Similar to multi-head self-attention, the output of sliding-window attention is computed using learnable matrices, with a window causal mask ensuring each query only attends to previous keys within a limited distance. Pre-normalization and residual connections are also applied in this module.",
            "result_discussion": "The sliding-window attention mechanism effectively reduces KV cache memory complexity from O(n) to O(1) during inference, as intended. This reduction implies that memory usage remains constant regardless of sequence length, showcasing the potential of sliding-window attention to significantly improve memory efficiency in the YOCO architecture without sacrificing model performance.",
            "ablation_id": "2405.05254v2.No2"
        }
    ]
}