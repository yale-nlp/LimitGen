{
    "title": "Event Grounded Criminal Court View Generation with Cooperative (Large) Language Models",
    "abstract": "With the development of legal intelligence, Criminal Court View Generation has attracted much attention as a crucial task of legal intelligence, which aims to generate concise and coherent texts that summarize case facts and provide explanations for verdicts. Existing researches explore the key information in case facts to yield the court views. Most of them employ a coarse-grained approach that partitions the facts into broad segments (e.g., verdict-related sentences) to make predictions. However, this approach fails to capture the complex details present in the case facts, such as various criminal elements and legal events. To this end, in this paper, we propose an Event Grounded Generation (EGG) method for criminal court view generation with cooperative (Large) Language Models, which introduces the fine-grained event information into the generation. Specifically, we first design a LLMs-based extraction method that can extract events in case facts without massive annotated events. Then, we incorporate the extracted events into court view generation by merging case facts and events. Besides, considering the computational burden posed by the use of LLMs in the extraction phase of EGG, we propose a LLMs-free EGG method that can eliminate the requirement for event extraction using LLMs in the inference phase. Extensive experimental results on a real-world dataset clearly validate the effectiveness of our proposed method. Code is available at https://github.com/yuelinan/Codes-of-EGG.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "1. Introduction",
            "text": "The remarkable success of deep neural networks has stimulated the exploration of legal intelligence applications (Luo et al., 2017; Zhong et al., 2018, 2020; Wu et al., 2022; Zhang et al., 2023; Liu et al., 2023). Among these applications, Criminal Court View Generation has garnered increasing attention as a foundational facet of legal intelligence. As depicted in Figure 1(a), the objective of criminal court view generation is to produce a coherent text, referred to as a court view, which serves as a concise representation of the case facts and offers an explanation for the rendered verdicts, such as charges and sentencing. The automated generation of court views has the potential to alleviate the workload of legal professionals while providing legal assistance to laymen.\n\nThe existing approaches in the field can be categorized into two groups: domain-specific models and large language models (LLMs). Several domain-specific models commonly generate court views by leveraging key information extracted from the case facts using legal knowledge. For instance, C3VG, a court view generation model that has demonstrated promising results, explicitly categorizes crime circumstances in the case facts into two broad types: verdict-related circumstances and sentencing-related ones. Subsequently, it employs pre-trained language models (PLMs) to generate court views based on these two types of information. Nevertheless, the components comprising the case facts are highly intricate. As illustrated in Figure 1(b), case facts encompass various criminal elements (i.e., legal events), represented by the underlined tokens in the fact description. Consequently, the adoption of a coarse-grained domain-specific approach that partitions the facts into two segments proves to be inadequate.\n\nFurthermore, considering that court view generation is essentially a text generation task, it is plausible to fine-tune LLMs for court view generation. However, as evident from the experimental findings presented, simple fine-tuning of LLMs does not yield satisfactory results. This could be attributed to the intricacy of the fact descriptions, necessitating the incorporation of additional legal knowledge. In this regard, a straightforward approach is to substitute PLMs with LLMs in domain-specific models. Nonetheless, domain-specific models often involve the collaborative training of multiple PLMs, which poses a significant computational burden on LLMs.\n\nTo this end, in this paper, we aim to develop a method which incorporates fined-grained event information into the court view generation by leveraging the collaboration between LLMs and PLMs in domain-specific models. The overview of our proposed method is present in Figure 1(b) and is two-fold: (1) extracting the fine-grained event of the case fact and (2) generating court views based on the identified events. However, it is a non-trivial problem.\n\nAlthough available legal event extraction datasets contain substantial annotated data, they primarily focus on annotating which information belongs to events in each legal document within specific case types. This approach not only necessitates extensive professional effort but also requires re-annotation of vast amounts of legal documents when encountering new case types, thereby serving as a major bottleneck for practical applications of legal event extraction. Therefore, it is crucial to devise a strategy that can extract events with minimal human annotation and demonstrate good generalization capabilities across different case types.\n\nTo tackle the challenge mentioned above, we propose an Event Grounded Generation (EGG) method for criminal court view generation with Cooperative (Large) Language Models following an extract-generate framework: In the extraction phase, we design a LLMs-based event extractor. \n\nNext, we combine the question and answer to get the events (e.g., the fine-grained events information in Figure 1(b)). In summary, this approach only necessitates the annotation of relevant questions for each case type, with an average of 9 questions per case type. In comparison to previous methods, our proposed event extraction approach significantly reduces the annotation time required.\n\nIn the generation phase, we splice the facts and events together to form a new text input, which is then fed into the PLMs-based generator to yield the court views. Additionally, taking into consideration the computational burden posed by the use of LLMs in the extraction phase of EGG, we recognize the need to enhance its practical applicability for both laymen and professionals. To address this, we propose an LLMs-free EGG method, which eliminates the requirement of events during the inference phase. Specifically, in the training process, we still employ LLMs to extract events in the extraction phase. However, in the generation phase, instead of merging the event and fact as input to the generator, we leverage the event as auxiliary information to assist the model in generating the court view based solely on the fact. To achieve this, we encode the fact and event separately using the fact and event encoders. Subsequently, we design a contrastive learning module to facilitate the fact encoder in capturing co-occurrence signals with the event through contrastive constraints. Finally, we"
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "2. Related Work",
            "text": "Court View Generation.\n\nThe advancement in neural networks has significantly contributed to the field of legal intelligence (Zhong et al., 2018 ###reference_b44###, 2020 ###reference_b45###; Shao et al., 2021 ###reference_b28###; Ma et al., 2021 ###reference_b22###; Li et al., 2023 ###reference_b16###; Chen et al., 2023 ###reference_b4###). Among various aspects, court view generation is gaining attention (Ye et al., 2018 ###reference_b37###; Yue et al., 2021b ###reference_b41###).\n\nIn this context, Ye et al. (2018) were pioneers in defining the task of court view generation. They examined the use of charges to enhance the generation process, enabling the model to concentrate on verdict-related information within case facts. Huang et al. (2020) introduced a method that employed masking key tokens in a template, followed by a question-answering (QA) technique to complete these masked tokens. Wu et al. (2022) proposed integrating legal judgment prediction with court view generation to allow simultaneous generation of judgment results and court views. Additionally, Yue et al. (2021b) implemented an extract-generate framework that categorized case facts into verdict-related and sentencing-related information using an extractor, with generated court views based on this extracted data.\n\nDespite these advancements, current methodologies have not fully utilized the fine-grained event information embedded in case facts, which underlines the necessity of incorporating event information for enhanced court view generation.\n\nLarge Language Model in Legal AI.\n\nLarge Language Models (LLMs) like ChatGPT (OpenAI, 2023 ###reference_b24###) and LLaMA (Touvron et al., 2023 ###reference_b31###) have demonstrated remarkable performance in various complex tasks, significantly impacting the field. In legal AI, researchers are integrating LLMs with legal tasks (Wang et al., 2023 ###reference_b33###; Yue et al., 2023a ###reference_b42###; He et al., 2023 ###reference_b9###).\n\nLawyer LLaMA (Huang et al., 2023 ###reference_b11###) is a notable example, where the model was continually pretrained on an extensive legal corpus to gain legal knowledge systematically. It was later fine-tuned with legal instruction data to apply this knowledge effectively in specific scenarios, thus harnessing LLMs' potential to boost legal AI efficiency.\n\nSimilarly, ChatLaw (Cui et al., 2023 ###reference_b6###) explored larger base models to enhance the logical reasoning capabilities of legal models, utilizing the increased capacity of these models for complex legal reasoning tasks.\n\nAddressing privacy concerns in the legal domain, FedJudge (Yue et al., 2023b ###reference_b38###) employs Federated Learning for instruction tuning, safeguarding the privacy of legal data by training models on local devices and sharing only aggregated updates instead of raw data.\n\nThis paper focuses specifically on utilizing LLMs for legal event extraction.\n\n###figure_3### Legal Event Extraction.\n\nIn legal event extraction, various studies (Li et al., 2019 ###reference_b15###; Shen et al., 2020 ###reference_b29###; Li et al., 2020 ###reference_b17###; Yao et al., 2022 ###reference_b36###; Feng et al., 2022 ###reference_b8###) have focused on annotating legal event types in each legal document. Yao et al. (2022) annotated over 8,000 legal documents with 108 event types, but this manual annotation is labor-intensive and time-consuming. The necessity to label additional data for new legal event types highlights the limitations of existing datasets.\n\nDeveloping an event extraction method with minimal reliance on exhaustive manual annotation is essential."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "3. Event Grounded Generation for Criminal Court View",
            "text": ""
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "3.1. Problem Definition",
            "text": "Here, we explore the problem of criminal court view generation. We first clarify the definitions of the terms as follows:\n\nFact description is the identified facts in a case including several events, where denotes the i-th token.\n\nEvent set consists of events of the fact, where contains tokens and each event is a subsequence of the fact.\n\nCourt view is the summary of the fact which consists of the charge and rationales. Among them, the rationale is concluded from the fact in order to determine and support the judgment results, such as sentencing.\n\nIn this work, we assume the charge is available, and we only focus on generating rationales in court views, where the charge can be easily obtained by the judge or the charge prediction systems.\n\nThen, based on the above definitions, our problem is defined as:\n\nProblem 1 (Court View Generation).\n\nGiven the case fact, our goal is first to extract several events from the case fact, and then generate the rationales in court views, where the gold events are unavailable."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "3.2. Architecture of EGG",
            "text": "Our proposed Event Grounded Generation (EGG) for criminal court view method consists of two phases, cascading the event extractor and the court view generator. Specifically, in the extraction phase, we first train a LLMs-based QA model which can extract a subsequence of the text input as the answer to the prompts (or questions). After the model is trained, we consider this model as the event extractor to select several events from the case fact by introducing annotated legal event-related questions. Finally, we employ a PLMs-based court view generator to generate court views by merging the fact and event as the new text input."
        },
        {
            "section_id": "3.2.1",
            "parent_section_id": "3.2",
            "section_name": "3.2.1. Event extractor",
            "text": "Existing legal event extraction datasets (Yao et al., 2022; Feng et al., 2022) mainly focus on annotating each case under different case types (i.e., different charges). However, this annotation requires significant and expensive professional labor. Meanwhile, when faced with a new case type, it commonly needs to be re-labeled. To address this, we develop a zero-shot LLMs-based legal event extractor.\n\nWe begin by transforming the original dataset into an instruction dataset, where each instruction data has the form of input and expected output. This process includes formatting the prompt, task-specific instruction, and ground truth in our instruction dataset.\n\nNext, we utilize the instruction tuning method to fine-tune the base generative LLMs to extract answers from paragraphs. To address the computational and time constraints associated with directly fine-tuning the entire LLM, we employ the parameter-efficient fine-tuning technique for training the extractor. Specifically, we employ the LoRA (Hu et al., 2022) method which involves freezing the pre-trained model parameters and introducing trainable rank decomposition matrices into each layer of the Transformer architecture (Vaswani et al., 2017).\n\nThe learning objective can be computed based on how the model predicts tokens sequentially, with certain parameters being frozen, while others are set to be trainable.\n\nAfter training the LLMs-based extractor, we annotate several questions for each case type, where each question is related to the event in case facts. It is important to note that we label the questions only for the case type and not for each individual case fact. For instance, if we have a case fact related to the crime of Affray, we utilize the previously labeled questions for Affray, such as the cause of the crime, tools of the crime, and whether to surrender.\n\nWe then promote the trained LLM to answer these event-related questions and obtain the corresponding answers. Finally, we combine the obtained answers with the corresponding questions to identify the event.\n\nThis zero-shot capability increases the versatility and adaptability of our approach to handle new or unseen case types."
        },
        {
            "section_id": "3.2.2",
            "parent_section_id": "3.2",
            "section_name": "3.2.2. Court view generator",
            "text": "Previous models generate court views based solely on case fact. In this section, our court view generator designs a strategy to incorporate extracted event information into the fact to yield more plausible court views, where we adopt the BART (Lewis et al., 2020) as our backbone by considering the advantages of the current PLMs. Specifically, we merge the event and fact descriptions to form new input of the court view generator. In practice, limited by the maximum length of the PLMs, we enforce the events to be placed before facts, where the merger process organizes the input."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "3.3. Training and Inference",
            "text": "In this section, we describe the training loss in our proposed method EGG. Specifically, in the extraction phase, we employ Eq(1) to train our LLMs-based event extractor. In the generation phase, we adopt the negative log-likelihood loss to optimize the generator: where  is the trainable BART parameters,  denotes the -th token of  and  is the tokens before . During the inference phase, given a description of case fact, we first use the LLMs-based event extractor to extract the events from the case fact. Then, we generate the court view based on both the facts and events."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "4. : LLMs-free EGG with contrastive constraints",
            "text": "Indeed, the use of LLMs for event extraction in the extraction phase of EGG can lead to increased computational burden during the inference phase. This limitation hampers the practical application of the model in real-world scenarios. To overcome this challenge, we propose an LLMs-free EGG method that employs contrastive constraints, enabling court view generation without the need for event information during the inference phase."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "4.1. Architecture of",
            "text": "During training,  follows the extractor-generator framework.\nSpecifically, in the extraction phase, similar to EGG, we still employ LLM to extract events.\nIn the generation phase, unlike the previous EGG of combining event and fact as inputs to the generator, we use event as a kind of auxiliary information to assist the model in generating court views based on fact. In particular, as shown in Figure 4  ###reference_###, given the fact and event, we first employ the fact encoder and event encoder to encode both fact  and event  as the corresponding representations  and , where  is the dimensional size.\nThen, we feed the fact representation into the decoder for court view generation. In practice, we use the encoder and decoder of BART to achieve the above implementation.\nSubsequently, to enable the fusion of event information into , we employ a novel contrastive learning strategy during the training phase. This strategy aims to teach the fact encoder to memorize the co-occurrence event signals within its parameters, allowing the fact encoder to inject event clues into fact representations during the inference phase.\nIn particular, during the training phase, as shown in Figure 4  ###reference_###, we adjust the parameters of the fact encoder based on the event encoder to maximize the mutual information between the case fact and event. To achieve this objective, for a training fact representation , we build its positive sample set using its corresponding event  (referred to ), i.e., ,\nand its negative sample set  where  denotes each batch of event samples.\nTo teach the fact encoder to memorize the co-occurrence event signals, we define the contrastive loss following the concept of InfoNCE (Oord et al., 2018  ###reference_b23###). The contrastive loss is formulated as:\nwhere  represents the similarity measure between the fact representation  and the event representation , and  is a temperature parameter that controls the sharpness of the probability distribution.\nBesides, we set the fact encoder and the event encoder to share parameters to save GPU memory. According to our experiments, separate encoders and shared encoders do not have a significant difference in the generation performance."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "4.2. Training and Inference",
            "text": "In the training process, since  uses the same extractor as EGG, we use Eq(1  ###reference_###) to train the extractor. Besides, the final objective of the generator in  is defined as:\nwhere  is the adjusted hyperparameter.\nDuring the inference phase, since the fact encoder learns to capture co-occurrence signals with the event through contrastive constraints,  can ignore the event as the input, enabling the generation of contextually relevant court views based solely on the case fact.\nBy leveraging contrastive constraints, our proposed method eliminates the reliance on LLMs for event extraction in the inference phase. This approach significantly reduces the computational burden, making the model more suitable for real-world applications."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "5. Experiments",
            "text": "To evaluate the effectiveness of EGG, we conduct experiments to answer the following research questions:\nRQ1: How effective is EGG in improving the performance of event extraction and court view generation?\nRQ2: How efficient is EGG during the inference phase?\nRQ3: What are the performances of EGG by the length of court views?\nRQ4: How does EGG perform in human evaluation?\nRQ5: What is the court view generated by EGG to a specific case fact?"
        },
        {
            "section_id": "5.1",
            "parent_section_id": "5",
            "section_name": "5.1. Datasets",
            "text": "In the generation phase, following (Yue et al., 2021b), we conduct experiments on CJO, where CJO is collected from the published legal documents in China Judgments Online. Detailed dataset statistics are shown in Table 1. Among them, since there exist 62 types of cases, we ask three law experts to annotate questions for each case type, for a total of 558 questions."
        },
        {
            "section_id": "5.2",
            "parent_section_id": "5",
            "section_name": "5.2. Experimental Setup",
            "text": "In this section, we present the detailed experimental setup of our proposed EGG. First, in the extraction phase, we adopt Baichuan-7B (BaiChuan-Inc, 2023) as the backbone of the LLMs-based event extractor. Then, we employ LoRA to parameter-efficient fine-tune it on the instruction dataset. For training, we adopt an AdamW optimizer (Loshchilov and Hutter, 2019) with an initial learning rate of 1e-5, set the maximum sequence length as 512, and the batch size as 4. Besides, the rank of LoRA is set to 4. In the generation phase, we employ BART (Lewis et al., 2020) to generate the court views. We set the learning rate to 1e-4 and the batch size to 8. For evaluation, since there exist no gold events in CJO, we assume that the better the generated court views perform, the more effective events are extracted. To this end, to evaluate the performance of the generation, we adopt ROUGE (Lin, 2004) and BLEU (Papineni et al., 2002) as the metrics. Among them, we report F1 scores of ROUGE-1, ROUGE-2, and ROUGE-L, and keep the result of BLEU-1, BLEU-2, and BLEU-N (i.e., an average score of BLEU-1, BLEU-2, BLEU-3, and BLEU-4)."
        },
        {
            "section_id": "5.3",
            "parent_section_id": "5",
            "section_name": "5.3. Comparison methods",
            "text": "In this section, to evaluate the generated court view, we employ three types of baselines. First, we compare EGG with several traditional baselines:\n\n- AttS2S (Bahdanau et al., 2014 ###reference_b2###) is an attention-based sequence-to-sequence model, following an encoder-decoder framework.\n- PGN (See et al., 2017 ###reference_b27###) employs a pointer network to solve the out-of-vocabulary (OOV) problem in text generation.\n- Transformer (Vaswani et al., 2017 ###reference_b32###) has been widely implemented to generate texts.\n- Label-AttS2S (Ye et al., 2018 ###reference_b37###) is designed to generate court views by introducing the charge semantics into AttS2S.\n- C3VG (Yue et al., 2021b ###reference_b41###) separates the case fact into two parts with an extract-generate framework to generate the court views.\n\nThe above baselines are implemented with GRU (Cho et al., 2014 ###reference_b5###) or transformer.\n\nSince pre-training models have boosted text generation achievements in recent years, we introduce several approaches based on these models:\n\n- BART (Lewis et al., 2020 ###reference_b14###) is a Transformer-based pre-training sequence-to-sequence model, which achieves promising results in text generation. In this paper, BART(Fact) denotes BART takes the case fact as the input. BART(Event) represents taking the extracted event as the input.\n- C3VG with BART (Yue et al., 2021b ###reference_b41###) implements C3VG with BART as the backbone.\n\nFinally, we also compare LLMs baselines with EGG:\n\n- Baichuan-7B (BaiChuan-Inc, 2023 ###reference_b3###) is a large language model that achieves competitive results in Chinese intelligence tasks.\n- Baichuan-7B(Fact) employs LoRA to fine-tune Baichuan-7B by taking the case fact as the input with the form of the instruction dataset. Among them, the Instruction Input is: \u201cAssuming you are a judge, please summarize the facts of the case: [the description of case facts]\u201d, and the Instruction Output is the court views."
        },
        {
            "section_id": "5.4",
            "parent_section_id": "5",
            "section_name": "5.4. Performance on Event Extraction and Court View Generation (RQ1)",
            "text": ""
        },
        {
            "section_id": "5.4.1",
            "parent_section_id": "5.4",
            "section_name": "5.4.1. Results of event extraction",
            "text": "In this section, we focus on evaluating the effectiveness of the trained model to predict potential events in our court view data CJO. To further evaluate the extracted events, we consider that the better the generated court view performs, the more effective the extracted events will be. The corresponding results are shown in section 5.4.2."
        },
        {
            "section_id": "5.4.2",
            "parent_section_id": "5.4",
            "section_name": "5.4.2. Results of court view generation",
            "text": "To validate the effectiveness of EGG, we first compare it with several baselines. As shown in Table 2, we find that methods exploiting PLMs outperform traditional baselines implemented with GRU or transformer, which demonstrates the effectiveness of PLMs.\n\nWe observe that both EGG and similar methods perform better than other baselines in most metrics, indicating that EGG can generate more plausible court views. Specifically, EGG significantly outperforms methods like C3VG with BART, which groups the original fact into different types of paragraphs to generate court views. This demonstrates that incorporating fine-grained events into court view generation is more effective than using coarse-grained paragraphs.\n\nWe also implement BART by taking fact and event as text input, respectively. From the results, we observe that BART(fact) surpasses BART(Event) by a large margin, illustrating that several events are not extracted. These observations prove the necessity of designing a strategy to combine case facts with event information for generating court views.\n\nAdditionally, Baichuan-7B without instruction tuning performs well on the legal task in the zero-shot setting, indicating it already possesses court view abilities through training on large datasets. However, its results are worse than the fine-tuned model (Baichuan-7B(Fact)), showing the importance of fine-tuning LLMs for court view generation.\n\nAlthough Baichuan-7B(Fact) achieves promising results on BLEU compared to EGG, it underperforms on ROUGE and Bert-S. EGG does not require fine-tuning LLMs in the generation phase, further illustrating its effectiveness.\n\nFinally, we analyze the difference between EGG and similar methods. From Table 2, EGG performs better, indicating that directly and explicitly combining case facts and events on the data side is more effective than implicitly introducing events into the model structure. However, in terms of inference speed and computational resources, the alternative method is faster and occupies fewer resources yet achieves similar results to EGG. This observation illustrates the effectiveness of the alternative method which employs contrastive learning to incorporate event information into the learning of factual representations. In section 5.5, we further illustrate the efficiency of inference in alternative methods."
        },
        {
            "section_id": "5.5",
            "parent_section_id": "5",
            "section_name": "5.5. Efficiency of Inference in  (RQ2)",
            "text": "In this section, we present the results of our experiments comparing the inference speed of our proposed method with other baselines. The hardware setup for the experiments consists of 12 cores of Intel(R) Xeon(R) Gold 5317 CPU and a single 40G NVIDIA A100 Tensor Core GPU. The findings are summarized in Table 3.\n\nOur proposed method achieves an impressive decoding speed, approximately 12 times the speed achieved by EGG, which utilizes LLM for event extraction. It is worth noting that EGG has the slowest inference speeds.\n\nBesides, although the difference between the number of parameters in EGG and Baichuan-7B is not significant, since there are multiple events for a single case, EGG often needs to perform multiple event extractions, and thus is slower than Baichuan-7B.\n\nThis observation highlights that our method strikes a balance between efficiency and effectiveness, making it well-suited for resource-constrained users.\n\nThe results demonstrate that our method offers a practical solution for legal event extraction, providing efficient performance while maintaining effectiveness. Its suitability for resource-constrained users makes it a valuable option in real-world applications."
        },
        {
            "section_id": "5.6",
            "parent_section_id": "5",
            "section_name": "5.6. Performance by the Length of Court Views (RQ3)",
            "text": "In this section, we focus on investigating the generation performance of court views based on their length. We sample examples from the test set of CJO, where the real court views have lengths ranging from 50 to 120 tokens. We then predict and evaluate the generated court views by comparing them with the outputs of EGG and C3VG with BART using ROUGE-L and BLEU-4 scores.\n\nThe findings reveal that both EGG and C3VG with BART experience a degradation in performance as the length of court views increases. However, we observe that our EGG achieves the best performance when the court view length is between 60 and 70 tokens, with both ROUGE-L and BLEU-4 scores surpassing 90. Furthermore, our method outperforms C3VG with BART across all court view lengths, indicating the effectiveness of incorporating fine-grained event information into court view generation. This suggests that by considering the specific event details in the generation process, our approach can produce more accurate and higher-quality court views compared to existing methods."
        },
        {
            "section_id": "5.7",
            "parent_section_id": "5",
            "section_name": "5.7. Human Evaluation (RQ4)",
            "text": "Table 2 highlights that both EGG and exhibit lower BLEU scores compared to Baichuan-7B(fact), prompting the need to investigate the performance of generated court views. To gain further insights, a human evaluation is conducted on the court views generated by EGG and Baichuan-7B(fact). In this evaluation, a total of 100 examples are sampled, and three annotators with expertise in both computer science and law are asked to evaluate the generated court views based on two metrics: Usefulness and Fluency. Each metric is scored on a scale from 1 (lowest) to 5 (highest), with specific scoring standards provided in Table LABEL:human. The experimental results are presented in Table 5.\n\nThe results indicate that all models achieve promising scores in terms of Fluency, indicating that the generated court views are fluent and well-formed. Additionally, it is observed that EGG and outperform Baichuan-7B(fact) in terms of Usefulness. This finding further illustrates the effectiveness of incorporating fine-grained event information into court view generation. By considering the specific event details, our models generate court views that are deemed more useful by human evaluators."
        },
        {
            "section_id": "5.8",
            "parent_section_id": "5",
            "section_name": "5.8. Case Study (RQ5)",
            "text": "An example of extracted events and generated court views is shown in Figure 6.\nSpecifically, firstly, the type of case in this fact is intentional injury. Then, Event-related Questions show all questions designed for the crime of intentional injury. It is worth noting that the designed questions are the same for any fact which belongs to intentional injury. In the Answers, we present the answers extracted from the fact description according to the questions by the LLMs-based extractor. Afterward, we post-process the questions and answers to obtain the corresponding Events.\n\nNext, we present 7 court views generated by EGG and baselines: We can find although C3VG generates court views well, it fails to generate the court views about obtaining the victim\u2019s understanding. Conversely, EGG can generate more plausible court views. Besides, EGG also yields injured another person with a knife which has been described in fact description but not in the real court view. This observation indicates EGG can generate several key information, which is ignored by the real court view. Besides, compared to BART(Event), we find it generates several unfaithful court views (the underlined) which do not exist in the case fact, illustrating that it is unfeasible to generate court views based solely on events, and we need to combine the fact and event for the generation. Then, although BART(Fact) has generated court views well, there are several omissions it generates compared to other methods. For example, EGG yields the injuries of the defendant is minor, however, BART(Fact) only generates the defendant has injuries (i.e., intentionally injured another person\u2019s body).\n\nMoreover, we can get a fluent court view by directly prompting Baichuan-7B (without fine-tuning). However, we tend to obtain some redundant information (e.g., \u201cIf you do not accept this judgment, \u2026 , directly to the [Province] Intermediate People\u2019s Court \u2026\u201d). This information has nothing to do with the court view, and may even involve some private information, such as [Province] Intermediate People\u2019s Court, where we have a privacy treatment for [Province] to show this example. Meanwhile, Baichuan-7B(fact) is not as accurate as EGG in yielding information about surrender, where Baichuan-7B(fact) only describes the defendant\u2019s surrender, while EGG also describes how the defendant surrendered (\u201cthe victim learned that others had called the police and waited at the scene to be arrested\u201d). These observations demonstrate that incorporating fine-grained event information into the court view generation is effective."
        },
        {
            "section_id": "6",
            "parent_section_id": null,
            "section_name": "6. Discussion",
            "text": "Ethical Discussion.\nCourt view generation has gained significant attention as a core task in legal intelligence.\nBased on the experimental results, EGG demonstrates the ability to generate more accurate court views. Additionally,  achieves a balance between modeling effectiveness and inference efficiency, making it suitable for users with limited computational resources.\nHowever, it is important to note that our model does not replace the work of judges. Instead, our aim is to assist judges in organizing court views and alleviate their workload. The final court views must be determined and decided upon by the judges themselves (Wu et al., 2020  ###reference_b34###; Yue et al., 2021b  ###reference_b41###). Our work serves to provide judges with a tool to streamline the process of collating court views and reduce their workload stress.\nLimitations.\nWhen extracting events, we simply post-process the extracted answers and questions to obtain the corresponding events. However, when dealing with complex relationships among events, such as causality, a more advanced approach is needed. One possible solution is to construct an event graph that represents the relationships among events.\nAn event graph is a graphical representation where events are nodes, and the relationships between events are represented by edges. By incorporating this event graph into the court view generation process, the model can better capture and understand the complex relationships among events.\nWe will leave it as the future work."
        },
        {
            "section_id": "7",
            "parent_section_id": null,
            "section_name": "7. Conclusion",
            "text": "In this paper, we proposed an Event Grounded Generation (EGG) method for criminal court view generation with cooperative (Large) Language Models, cascading the event extractor and the court view generator. To be specific, EGG first employed a trained LLMs-based legal event extractor to select several events in the case fact without massive annotated events. Then, in the court view generator, we incorporated these events into the court view generation by merging the case fact and event as the new input. Besides, to alleviate the computational burden in EGG during inference that employs LLMs, we further proposed a LLMs-free EGG method based on the contrastive constraint. This enhancement enables court view generation without requiring event information during the inference phase. Acknowledgements. This research was supported by grants from the National Natural Science Foundation of China (Grants No. 62337001, 623B1020) and the Fundamental Research Funds for the Central Universities."
        }
    ],
    "url": "http://arxiv.org/html/2404.07001v3",
    "segmentation": {
        "research_background_sections": [
            "1",
            "2"
        ],
        "methodology_sections": [
            "3.2",
            "3.2.1",
            "3.2.2",
            "3.3",
            "4",
            "4.1",
            "4.2"
        ],
        "main_experiment_and_results_sections": [
            "5.1",
            "5.2",
            "5.3",
            "5.4",
            "5.4.1",
            "5.4.2",
            "5.5",
            "5.6",
            "5.7",
            "5.8"
        ]
    },
    "ablation_segmentation": {
        "ablation_sections": [
            "5.4.1",
            "5.4.2",
            "5.5",
            "5.6",
            "5.7",
            "5.8"
        ]
    },
    "research_context": {
        "paper_id": "2404.07001v3",
        "paper_title": "Event Grounded Criminal Court View Generation with Cooperative (Large) Language Models",
        "research_background": "### Criminal Court View Generation with Cooperative (Large) Language Models\n\n**Introduction:**\n\n**Motivation:**\nThe paper is motivated by the need to optimize the generation of criminal court views, which are concise representations of case facts and explanations for rendered verdicts. This automation has the potential to reduce the workload of legal professionals and provide useful legal assistance to non-professionals.\n\n**Research Problem:**\nExisting methods in criminal court view generation either utilize domain-specific models or large language models (LLMs). However, domain-specific models often partition the case facts into broad categories, which proves inadequate due to the complexity of the information. Additionally, fine-tuning LLMs directly on this task has not yielded satisfactory results, likely because of the intricate nature of case facts and the lack of additional legal knowledge. There remains a significant computational burden in using multiple pre-trained language models (PLMs) collaboratively within these approaches.\n\n**Prior Work:**\nPrior work includes domain-specific models like C3VG, which use pre-defined crime circumstances categorized into verdict-related and sentencing-related information to generate court views. However, the approach is coarse-grained, insufficiently addressing the diverse elements of case facts. Large language models (LLMs) like Baichuan-7B have been considered for fine-tuning but face challenges due to the complexity of the task. Furthermore, datasets for legal event extraction exist (Feng et al., 2022; Yao et al., 2022) but require extensive annotation for each new case type, hindering practical applications.\n\n**Proposed Approach:**\nThe paper proposes an Event Grounded Generation (EGG) method, which integrates fine-grained event information into the court view generation process by leveraging collaborative (large) language models. This method adopts an extract-generate framework, refining the extraction process through an LLM-based extractor fine-tuned on a legal QA dataset (CJRC). The method only necessitates annotating event-related questions for each case type (e.g., Mobbing), enabling a zero-shot event extraction approach. Following extraction, the events and facts are spliced together to form inputs for a PLM-based generator to yield the court views. To alleviate computational burdens, an improved LLM-free version of EGG uses contrastive learning to capture co-occurrence signals, thereby eliminating the need for event extraction during inference.\n\n**Contributions:**\n1. Introducing the EGG method, incorporating fine-grained event information into criminal court view generation using cooperative (large) language models.\n2. Proposing a zero-shot legal event extraction approach with minimal human annotation.\n3. Developing an LLM-free EGG method to reduce computational demands during inference, enhancing practicality for both legal professionals and laymen.\n4. Validating the effectiveness of the approach through extensive experiments on a real-world dataset, comparing it with several competitive methods.",
        "methodology": "The proposed Event Grounded Generation (EGG) method for generating criminal court views involves two distinct phases: the extraction phase and the generation phase. Here is a detailed description of each phase's key components and innovations:\n\n1. **Extraction Phase:**\n   - **LLMs-based QA Model Training:** Initially, a large language model-based question answering (LLMs-based QA) model is trained. This model is designed to extract specific subsequences of a text input as responses to particular prompts or questions.\n   - **Event Extraction:** Once the QA model is adequately trained, it functions as an event extractor. It identifies and selects several relevant events from the case fact by responding to pre-defined, annotated legal event-related questions.\n\n2. **Generation Phase:**\n   - **PLMs-based Court View Generator:** A pre-trained language model (PLMs) is then employed as the court view generator. This generator creates court views by synthesizing the extracted events and the case facts into a cohesive and comprehensive new text input.\n\nBy cascading these two phases, the EGG method innovatively combines the capabilities of large language models for question answering with pre-trained language models for text generation, effectively producing detailed and contextually grounded criminal court views.",
        "main_experiment_and_results": "### Main Experiment Setup and Results:\n\nIn the extraction phase, the criminal cases from the China Judgments Research Challenge (CJRC) are used as the training data. The criminal cases from CJRC are processed into the format of an instruction dataset.\n\nIn the generation phase, experiments are conducted following the methodology of Yue et al. (2021b) on the China Judgments Online (CJO) dataset. This dataset is collected from the published legal documents available on China Judgments Online. \n\nSince there are 62 types of cases within the dataset, three law experts were asked to annotate questions for each type, resulting in a total of 558 annotated questions. \n\n**Datasets:**\n- Training Data: CJRC (China Judgments Research Challenge).\n- Evaluation Data: CJO (China Judgments Online).\n\n**Baselines and Metrics:**\nThe document does not detail the specific baselines and evaluation metrics used in this summarized section. However, it can be inferred that the baselines would be standard models and methods related to legal document analysis and generation, and the evaluation metrics would typically measure the accuracy and relevance of the generated views in the legal context.\n\nThe specific main experimental results are not provided in this summary. However, it would generally include performance measures (like precision, recall, or other legal text relevance metrics) compared against baselines, highlighting improvements or areas of success for the proposed methods."
    },
    "reference_ablation_studies": [
        {
            "research_objective": "Evaluate the performance of the LLMs-based extraction model on event extraction from legal case data.",
            "experiment_process": "The macro-average F1 score of the LLMs-based extraction model was calculated on the test set of CJRC. Comparisons were made against previous results reported in the CJRC paper, which used BERT for answer extraction.",
            "result_discussion": "The LLMs-based model achieved a macro-average F1 of 84.6, outperforming the original CJRC paper's F1 of 82.9, demonstrating the effectiveness of LLMs on extraction. However, further evaluation on the court view data CJO is necessary to sufficiently illustrate the effectiveness of the extracted events.",
            "ablation_id": "2404.07001v3.No1"
        },
        {
            "research_objective": "Validate the effectiveness of the Event Grounded Generation (EGG) method compared to other baselines in court view generation.",
            "experiment_process": "EGG was compared to several baselines including GRU and transformer models, as well as methods utilizing pre-trained language models (PLMs). Performance was measured on various metrics and included implementations of BART with facts and events as input.",
            "result_discussion": "All methods using PLMs outperformed traditional baselines. EGG performed better than other baselines in most metrics, demonstrating the effectiveness of incorporating fine-grained events. BART(fact) significantly outperformed BART(Event), indicating that not all events were extracted. Baichuan-7B showed promising results, but fine-tuning improved performance, particularly in ROUGE and Bert-S metrics, further illustrating the effectiveness of EGG.",
            "ablation_id": "2404.07001v3.No2"
        },
        {
            "research_objective": "Compare the inference speed of different methods, particularly focusing on the efficiency of the proposed LLM-free EGG method.",
            "experiment_process": "Inference speed was compared across models using a hardware setup with 12-core Intel Xeon Gold 5317 CPU and a single 40G NVIDIA A100 Tensor Core GPU.",
            "result_discussion": "The proposed LLM-free method achieved a decoding speed approximately 12 times faster than EGG (which utilizes LLMs for event extraction). Although EGG had the slowest inference speeds, the newly proposed method balanced efficiency and effectiveness, making it suitable for resource-constrained users.",
            "ablation_id": "2404.07001v3.No3"
        },
        {
            "research_objective": "Investigate the performance of court view generation relative to the length of the court views generated.",
            "experiment_process": "Samples from the CJO test set with court views ranging from 50 to 120 tokens were evaluated using ROUGE-L and BLEU-4 scores, comparing results to predictions by EGG and C3VG with BART.",
            "result_discussion": "Both EGG and C3VG with BART showed performance degradation with longer court views. EGG achieved the best performance for court views between 60 and 70 tokens, surpassing 90 in both ROUGE-L and BLEU-4 scores. EGG consistently outperformed C3VG with BART, indicating the effectiveness of using fine-grained event information.",
            "ablation_id": "2404.07001v3.No4"
        },
        {
            "research_objective": "Conduct a human evaluation to assess the usefulness and fluency of generated court views.",
            "experiment_process": "Human evaluation involved 100 examples assessed by three annotators with computer science and law expertise. The generated court views from EGG and Baichuan-7B(fact) were rated on a scale from 1 to 5 for Usefulness and Fluency.",
            "result_discussion": "All models achieved high fluency scores, indicating well-formed court views. EGG and the proposed model outperformed Baichuan-7B(fact) in Usefulness, demonstrating that fine-grained event information led to more useful court views.",
            "ablation_id": "2404.07001v3.No5"
        },
        {
            "research_objective": "Perform a case study to demonstrate the effectiveness of incorporating fine-grained event information into court view generation.",
            "experiment_process": "An example case of intentional injury was used to illustrate extracted events and seven generated court views by EGG and other baselines. Comparisons were made between different methods, including C3VG and BART implementations.",
            "result_discussion": "EGG generated more plausible and comprehensive court views compared to baselines. It provided additional key information not found in the real court view and generated more accurate descriptions compared to methods relying solely on events. Baichuan-7B without fine-tuning added redundant and private information, whereas EGG gave detailed accounts, demonstrating its effectiveness in incorporating fine-grained events.",
            "ablation_id": "2404.07001v3.No6"
        }
    ]
}